[{"author":null,"categories":null,"content":"Cursor 聊天歷史提取器 這是一個用於提取和整理 Cursor 編輯器聊天歷史記錄的 Python 工具。該工具可以從 Cursor 的本地數據庫中提取聊天記錄，並將其整理成易於閱讀的 Markdown 格式文件。\n功能特點 🔍 自動搜索: 自動在 Cursor 的 workspaceStorage 目錄中搜索聊天數據庫 📊 數據提取: 從 SQLite 數據庫中提取聊天記錄數據 📝 格式化輸出: 將聊天記錄轉換為結構化的 Markdown 格式 📁 智能組織: 按日期和時間自動組織輸出文件夾 🔗 工作區鏈接: 在輸出文件中包含原始工作區路徑的鏈接 📋 日誌記錄: 完整的操作日誌記錄，便於調試和監控 項目結構 app/\r├── main.py # 主程序入口\r├── config/\r│ └── logging_config.py # 日誌配置\r├── libs/\r│ ├── chat_processor.py # 聊天記錄處理器\r│ ├── database_handler.py # 數據庫操作處理器\r│ ├── file_handler.py # 文件操作處理器\r│ └── folder_organizer.py # 文件夾組織器\r├── logs/ # 日誌文件目錄\r├── exportAUTO/ # 自動導出功能\r└── cursor-history.bat # Windows 批處理啟動腳本 安裝要求 Python 3.6+ 無需額外依賴包（使用 Python 標準庫） 使用方法 方法一：使用批處理文件（推薦） # 雙擊運行 cursor-history.bat 方法二：直接運行 Python 腳本 python main.py 配置說明 在 main.py 中可以修改以下路徑配置：\n# Cursor 工作區存儲路徑 root_path = r\u0026amp;#34;C:\\Users\\zero\\AppData\\Roaming\\Cursor\\User\\workspaceStorage\u0026amp;#34; # 處理後文件移動目標路徑 destination_path = r\u0026amp;#34;C:\\Users\\zero\\AppData\\Roaming\\Cursor\\User\\koo\u0026amp;#34; # 聊天記錄輸出基礎路徑 output_base_path = …","date":1761696000,"dir":"post\\code\\python\\00_AIQA\\ch02_cursor\\cursor-history\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":["AIQA"],"kind":"page","lang":"en","lastmod":1761696000,"objectID":"91cee913728806cf272d83195ab93a63","permalink":"https://wikihuangblog.github.io/post/code/python/00_aiqa/ch02_cursor/cursor-history/","publishdate":"2025-10-29T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_aiqa/ch02_cursor/cursor-history/","section":"post","tags":["AIQA"],"title":"cursor-history","type":"post","url":"/post/code/python/00_aiqa/ch02_cursor/cursor-history/","weight":0,"wordcount":1149},{"author":null,"categories":null,"content":"AI 角色聊天工具 這是一個用於處理 Yodayo.com 網站上 AI 角色聊天連結的 Python 工具。該工具可以從 HTML 文件中提取角色資訊，建立資料夾結構，並下載相關圖片。\n功能特色 🔗 自動提取連結：從 HTML 文件中提取 /tavern/chat/ 開頭的連結 📁 智能資料夾管理：根據角色名稱自動建立資料夾，避免重複 🖼️ 圖片下載：自動下載角色的封面圖片 🔗 快捷方式建立：為每個角色建立 Opera 瀏覽器快捷方式 🧹 重複內容處理：合併多個 txt 文件並移除重複的連結 🛡️ Windows 路徑安全：自動處理 Windows 不支援的字元 專案結構 app/\r├── app.py # 主程式\r├── simple_test.py # 測試檔案\r├── ori.html # 原始 HTML 檔案\r├── issue.txt # 問題記錄\r├── src/ # 來源 txt 檔案資料夾\r│ ├── 1.txt\r│ ├── 2.txt\r│ └── ...\r├── 00_output/ # 輸出資料夾（自動建立）\r├── 00_version/ # 版本歷史\r│ ├── v1_url-ok;wait-open-by-opera.py\r│ ├── v2_opera-lnk-ok;wait-webp.py\r│ ├── v3_webp-ok;wait-all-txt-combine.py\r│ ├── v4_txt-combine-ok;wait-log-fail;wait-remove-repeat.py\r│ └── v5_no-repeat-ok;trim-wrong-name.py\r└── backuupp/ # 備份資料夾 安裝需求 Python 3.6+ Windows 作業系統（用於建立 .lnk 快捷方式） Opera 瀏覽器（可選，用於快捷方式） 使用方法 1. 基本使用 python app.py 2. 配置設定 在 app.py 中修改以下設定：\nDOMAIN = \u0026amp;#34;https://yodayo.com/\u0026amp;#34; # 目標網站 HTML_FILE = \u0026amp;#34;ori.html\u0026amp;#34; # HTML 檔案名稱 OUTPUT_ROOT = \u0026amp;#34;00_output\u0026amp;#34; # 輸出根目錄 SRC_FOLDER = …","date":1759881600,"dir":"post\\code\\python\\ch09_eng\\AI-sex-girl\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":[""],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"df987ad32598d16e31901950e71a9e52","permalink":"https://wikihuangblog.github.io/post/code/python/ch09_eng/ai-sex-girl/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/ch09_eng/ai-sex-girl/","section":"post","tags":[""],"title":"AI-sex-girl","type":"post","url":"/post/code/python/ch09_eng/ai-sex-girl/","weight":0,"wordcount":1192},{"author":null,"categories":null,"content":"程式碼同步工具 (Code Sync Tool) 專案概述 這是一個用於處理程式碼文件的 Python 工具，主要功能是將指定目錄下的程式碼文件（如 .java、.py 等）進行結構化整理，為每個程式碼文件創建對應的目錄和 Markdown 文檔。\n主要功能 🔄 自動化處理：批量處理指定目錄下的程式碼文件 📁 目錄結構化：為每個程式碼文件創建對應的目錄 📝 文檔生成：自動生成 .code.md 文件，包含原始程式碼內容 ⏰ 時間戳保持：保持原始文件的創建和修改時間 🛡️ 錯誤處理：完善的異常處理和編碼錯誤處理 🔍 深度限制：支持目錄深度限制，避免過度遞歸 系統需求 Python 3.6+ Windows 系統（使用 Windows API 設置文件時間） 必要的 Python 套件： pywin32 (用於 Windows API 操作) 安裝依賴 pip install pywin32 使用方法 基本用法 python app.py \u0026amp;lt;目標目錄路徑\u0026amp;gt; 範例 # 處理當前目錄下的 target 文件夾 python app.py target # 處理指定路徑的目錄 python app.py \u0026amp;#34;C:\\path\\to\\your\\code\\directory\u0026amp;#34; 處理流程 掃描文件：遞歸掃描目標目錄下的所有 .java 文件 創建目錄：為每個程式碼文件創建以文件名命名的目錄 生成文檔：創建 .code.md 文件，包含原始程式碼內容 移動文件：將原始程式碼文件移動到新創建的目錄中 保持時間戳：使用 Windows API 保持原始文件的創建和修改時間 目錄結構 處理前的目錄結構：\ntarget/\r├── 006_下一個更大的數.java\r├── 007_字符串中的單詞數.java\r└── other_code.java 處理後的目錄結構：\ntarget/\r├── 006_下一個更大的數/\r│ ├── 006_下一個更大的數.java\r│ └── 006_下一個更大的數__________{}______.code.md\r├── 007_字符串中的單詞數/\r│ ├── 007_字符串中的單詞數.java\r│ └── 007_字符串中的單詞數__________{}______.code.md\r└── other_code/\r├── …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\book-code-to-doubao-lnk-sync\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"5d351f36cac7580a7259241069ddb006","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/book-code-to-doubao-lnk-sync/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/book-code-to-doubao-lnk-sync/","section":"post","tags":["exam---"],"title":"book-code-to-doubao-lnk-sync","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/book-code-to-doubao-lnk-sync/","weight":0,"wordcount":1048},{"author":null,"categories":null,"content":"手機截圖合併工具 這是一個用於自動合併手機截圖的 Python 工具，可以將多張手機截圖裁切並水平合併成一張圖片。\n功能特色 自動識別並處理以 Screenshot_ 開頭的 JPG 檔案 自動裁切截圖的上下部分（上方裁切 350 像素，下方裁切 500 像素） 將多張截圖水平合併成一張圖片 與 QQ.jpg 檔案進行最終合併 處理完成後自動清理原始截圖檔案 系統需求 Python 3.x PIL (Pillow) 套件 安裝依賴 pip install Pillow 使用方法 方法一：使用批次檔（推薦） 將所有需要合併的截圖檔案（以 Screenshot_ 開頭）和 QQ.jpg 放在同一個資料夾中 雙擊執行 00_phone-pic-combine.bat 程式會自動處理並生成 00_merge.jpg 方法二：直接執行 Python 腳本 python app.py \u0026amp;#34;資料夾路徑\u0026amp;#34; 例如：\npython app.py \u0026amp;#34;C:\\Users\\YourName\\Pictures\\Screenshots\u0026amp;#34; 檔案結構 app/\r├── app.py # 主要程式檔案\r├── 00_phone-pic-combine.bat # 批次執行檔\r├── README.md # 說明文檔\r├── issue.txt # 開發記錄\r└── backupppp/ # 備份資料夾\r├── 00_merge.jpg\r├── QQ.jpg\r└── Screenshot_*.jpg 處理流程 檔案識別：掃描指定資料夾中所有以 Screenshot_ 開頭的 JPG 檔案 排序處理：按檔案名稱升序排列 圖片裁切：每張截圖裁切上方 350 像素和下方 500 像素 第一次合併：將所有裁切後的截圖水平合併成 00_merge.jpg 最終合併：將 QQ.jpg 與 00_merge.jpg 合併 清理檔案：刪除所有原始 Screenshot_ 開頭的檔案 輸出結果 生成檔案：00_merge.jpg（包含 QQ.jpg 和所有截圖的合併結果） 自動清理：刪除所有原始截圖檔案 注意事項 確保資料夾中包含 QQ.jpg 檔案 截圖檔案必須以 Screenshot_ 開頭 程式會自動覆蓋已存在的 00_merge.jpg …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\combinephonepic\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"84176b6ea89c9c9d1ea589fc106aa26a","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/combinephonepic/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/combinephonepic/","section":"post","tags":["exam---"],"title":"combinephonepic","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/combinephonepic/","weight":0,"wordcount":605},{"author":null,"categories":null,"content":"考試日期爬蟲工具 這是一個用於爬取考試資訊並自動創建 .url 快捷方式的 Python 工具。\n功能特色 🎯 自動爬取考試日期資訊 📁 自動創建 .url 快捷方式檔案 🏷️ 智能檔案命名：[考試日期] 考試名稱 🚀 使用 Playwright 進行網頁爬取 ⚡ 異步處理，提高效率 專案結構 app/\r├── app.py # 主要爬蟲程式\r├── exam_urls/ # 輸出目錄（存放 .url 檔案）\r├── ref/ # 參考資料\r│ ├── all.html # 參考網頁\r│ └── crawl-tasker-ref.py # 參考爬蟲程式\r└── README.md # 說明文件 系統需求 Python 3.7+ Playwright 網路連線 安裝步驟 安裝 Python 依賴套件\npip install playwright 安裝 Playwright 瀏覽器\nplaywright install chromium 使用方法 執行爬蟲程式\npython app.py 程式執行流程\n自動訪問考試網站 爬取左側選單中的所有考試連結 逐一訪問每個考試詳細頁面 提取考試日期資訊 創建格式為 [考試日期] 考試名稱.url 的快捷方式檔案 將所有 .url 檔案保存到 exam_urls/ 目錄 輸出格式 程式會在 exam_urls/ 目錄中創建 .url 檔案，檔案命名格式為：\n[考試日期] 考試名稱.url 例如：\n[2024/03/15] 高普考試.url [2024/04/20] 地方特考.url 技術細節 主要功能模組 create_url_shortcut(url, title, output_dir)\n創建 .url 快捷方式檔案 自動清理檔案名稱中的非法字元 限制檔案名稱長度 scrape_exam_dates(browser)\n爬取考試日期資訊 使用 Playwright 進行網頁操作 處理異步請求 main()\n主程式入口 管理瀏覽器生命週期 協調整個爬取流程 目標網站 主要網站：https://www.chienhua.com.tw/JobDetail.aspx?Num=8 爬取範圍：左側選單中的所有考試連結 注意事項 程式使用非無頭模式執行，可以看到瀏覽器操作過程 每個請求之間有 0.5 秒延遲，避免對伺服器造成過大負擔 檔案名稱會 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\exam-date-to-download-Q@@flow\\crawl-exam-date-sidebar\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"cd1bb02edeadfe2e3edae6beca2d11c3","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/exam-date-to-download-q@@flow/crawl-exam-date-sidebar/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/exam-date-to-download-q@@flow/crawl-exam-date-sidebar/","section":"post","tags":["exam---"],"title":"crawl-exam-date-sidebar","type":"post","url":"/post/code/python/00_exam---/exam-date-to-download-q@@flow/crawl-exam-date-sidebar/","weight":0,"wordcount":761},{"author":null,"categories":null,"content":"Obsidian 文章連結爬蟲工具 這是一個用於處理 Obsidian 相關文章連結的 Python 工具，可以從 sitemap.html 中提取文章連結並自動創建 .url 文件，按照文章編號進行分類整理。\n功能特色 🔍 從 sitemap.html 中提取文章標題和連結 📁 根據文章編號自動創建分類資料夾 🏷️ 智能識別多種文章編號格式 📝 自動生成 .url 文件，方便快速訪問 🛡️ 自動處理無效的檔案名稱字符 支援的文章編號格式 工具可以識別以下多種編號格式：\nObs171｜文章標題 - 標準格式 Obs＃59 文章標題 - 井號格式 [Obs＃59] 文章標題 - 方括號格式 [Obs#17] 文章標題 - 簡化方括號格式 安裝需求 pip install beautifulsoup4 使用方法 1. 準備 sitemap.html 文件 確保在專案目錄中有 sitemap.html 文件，該文件應包含 Obsidian 相關文章的連結。\n2. 執行腳本 python app.py 3. 查看結果 腳本執行後會：\n根據文章編號創建對應的資料夾（如：171/, 170/, 169/ 等） 在每個資料夾中創建對應的 .url 文件 無法識別編號的文章會放入 unknown/ 資料夾 輸出範例 假設有以下文章：\nObs171｜WonderBox：美化筆記的外掛，重點提示與強調關鍵\rObs170｜Obsidian的官方網頁擷取工具：Obsidian Web Clipper 執行後會創建：\n171/\r└── 171_WonderBox：美化筆記的外掛，重點提示與強調關鍵.url\r170/\r└── 170_Obsidian的官方網頁擷取工具：Obsidian Web Clipper.url 檔案結構 app/\r├── app.py # 主要處理腳本\r├── sitemap.html # 輸入的網站地圖文件\r├── issue.md # 專案說明文件\r└── README.md # 本說明文件 程式碼說明 主要函數 sanitize_filename() - 清理檔案名稱中的無效字符 extract_number() - 從標題中提取文章編號 create_folder_by_prefix() - 根據編號創建資料夾 process_sitemap() - 主要處理邏 …","date":1759881600,"dir":"post\\code\\python\\00_video\\crawl-html-sitemap\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"53dd3003d242c05ef1d77677869b0044","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/crawl-html-sitemap/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/crawl-html-sitemap/","section":"post","tags":["video"],"title":"crawl-html-sitemap","type":"post","url":"/post/code/python/00_video/crawl-html-sitemap/","weight":0,"wordcount":787},{"author":null,"categories":null,"content":"網頁內容爬取工具 這是一個用於從 HTML 清單文件中提取連結配對，並自動爬取網頁內容保存到本地資料夾的 Python 工具。\n功能描述 解析 output-taipower_combinedTable.html 文件中的連結配對 提取每個 link-group 中的本地路徑（Loc）和線上連結（SEEK） 使用 Playwright 自動化瀏覽器訪問需要登入的網頁 將網頁內容保存到對應的本地資料夾中 支援持久化登入狀態，避免重複登入 系統需求 Python 3.7+ 需要安裝的套件： playwright beautifulsoup4 安裝步驟 安裝 Python 依賴套件： pip install playwright beautifulsoup4 安裝 Playwright 瀏覽器： playwright install chromium 使用方法 確保 output-taipower_combinedTable.html 文件存在於專案根目錄 執行主程式： python app.py 程式會自動開啟瀏覽器視窗，請完成登入（DeepSeek/Doubao 等） 登入完成後，回到終端機按下 Enter 繼續 程式會自動爬取所有連結並保存到對應的本地資料夾 文件結構 app/\r├── app.py # 主程式\r├── output-taipower_combinedTable.html # 連結清單文件\r├── 00_issue.txt # 需求說明文件\r├── .playwright-user-data/ # Playwright 用戶資料夾（自動生成）\r└── README.md # 說明文件 程式功能詳解 主要函數 parse_loc_and_seek_pairs(): 解析 HTML 文件，提取 Loc 和 SEEK 連結配對 ensure_directory(): 確保目標資料夾存在 derive_filename_from_url(): 從 URL 生成安全的檔案名稱 sanitize_to_filename(): 清理文字為安全的檔案名稱 fetch_and_save(): 爬取網頁內容並保存到本地 特色功能 持久化登入狀態: 使用 Playwright 的持久化上下文，登入狀態會被保存 智能檔案命名: 優先使用網頁標題作為檔案名稱，fallback …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\crawl-title-file-to-folder\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"fc03e7058db509812ae6558b0a066b27","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/crawl-title-file-to-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/crawl-title-file-to-folder/","section":"post","tags":["exam---"],"title":"crawl-title-file-to-folder","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/crawl-title-file-to-folder/","weight":0,"wordcount":753},{"author":null,"categories":null,"content":"金融科技問答合併工具 這是一個用於處理金融科技考試題目和答案的 Python 工具，能夠自動將分離的題目和答案文件合併成統一的格式。\n專案概述 本專案主要用於處理金融科技相關的考試題目，包含：\n題目提取和解析 答案格式識別和處理 問答內容合併 多種答案格式支援 檔案結構 app/\r├── app.py # 主要程式檔案\r├── Q.md # 題目檔案\r├── A.md # 答案檔案\r├── combined.md # 合併後的輸出檔案\r├── 00_version/ # 版本控制資料夾\r│ ├── v1_combine-ok.py # 第一版合併程式\r│ └── v2_different-A-ok.py # 第二版（支援不同答案格式）\r├── A-diff/ # 答案差異比較\r│ ├── Av1.md\r│ └── Av2.md\r├── Q-diff/ # 題目差異比較\r│ ├── v1.md\r│ └── v2.md\r└── README.md # 本說明檔案 功能特色 1. 智能題目解析 自動識別題目編號和標題 支援多種題目格式 提取完整的題目內容 2. 多格式答案支援 格式一：### 題目數字： 格式 格式二：### **數字. 標題** 格式 自動檢測並適配不同格式 3. 內容合併 將題目和對應答案自動配對 生成統一的 Markdown 格式輸出 保持原始格式和連結 使用方法 基本使用 確保 Q.md 和 A.md 檔案存在於同一目錄 執行主程式： python app.py 程式會自動生成 combined.md 檔案 程式流程 讀取檔案：讀取 Q.md 和 A.md 提取題目：使用正則表達式解析題目內容 提取答案：智能識別答案格式並提取 合併內容：將題目和答案配對 輸出結果：生成格式化的 combined.md 支援的題目格式 題目格式範例 [21.世界經濟論壇 WEF(2015)指出，金融科技可能導致下列何種關係的轉變？](https://app.yamol.tw/exam/107084) (A) 通過金融機構與「同業」結合，將更難以滿足顧客金融需求 (B) 通過金融機構與「異業」結合，將更難以滿足顧客金融需求 (C) 顧客對「金融機構關係主導權」的瓦解 (D) 金融機構對「顧客關係主導權」的瓦解 答 …","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D02_06_combine-QA-newest\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"73073475fe65bcb0b167b12629d06af1","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d02_06_combine-qa-newest/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_tmp-not-organize/d02_06_combine-qa-newest/","section":"post","tags":["tmp-not-organize"],"title":"D02_06_combine-QA-newest","type":"post","url":"/post/code/python/00_tmp-not-organize/d02_06_combine-qa-newest/","weight":0,"wordcount":1121},{"author":null,"categories":null,"content":"HTML 內容提取與合併工具 這是一個用於從多個 HTML 文件中提取特定內容並合併成單一 Markdown 文件的 Python 工具。\n功能描述 本工具專門設計用於處理包含程式碼內容的 HTML 文件，能夠：\n從指定的 HTML 文件中提取特定結構的程式碼內容 將提取的內容合併成一個統一的 Markdown 文件 自動處理多個文件並保持內容的結構化組織 專案結構 app/\r├── app.py # 主程式文件\r├── requirements.txt # Python 依賴套件\r├── src.txt # 輸入文件路徑列表\r├── issue.txt # 專案需求說明\r├── output/ # 輸出目錄\r│ └── combined_content.md # 合併後的內容文件\r├── output-logic/ # 邏輯輸出目錄\r├── output-ooo/ # 其他輸出目錄\r└── 00_version/ # 版本歷史 安裝與使用 1. 安裝依賴套件 pip install -r requirements.txt 2. 準備輸入文件 在 src.txt 文件中列出要處理的 HTML 文件路徑，每行一個路徑：\nD:\\path\\to\\file1.html\rD:\\path\\to\\file2.html\rD:\\path\\to\\file3.html 3. 執行程式 python app.py 4. 查看結果 程式執行完成後，合併的內容將保存在 output/combined_content.md 文件中。\n程式功能詳解 主要功能 HTML 內容提取 (extract_content_from_html)\n使用 BeautifulSoup 解析 HTML 文件 尋找特定的 CSS 選擇器：div.code-block-element-n1aweO div.code-area-XKXobb div.content-s77455 pre.container-ecJHMm code 提取程式碼區塊中的文字內容 文件處理 (process_files)\n讀取 src.txt 中的文件路徑列表 自動創建 output 目錄 逐一處理每個 HTML 文件 將提取的內容合併到單一 Markdown 文件 輸出格式 合併後的 Markdown 文件包含：\n每個源文件的標題（格 …","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D13_08_combine-each-mindmap-text\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"1f33fe56354308b3f7824cafb95a4fcb","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d13_08_combine-each-mindmap-text/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_tmp-not-organize/d13_08_combine-each-mindmap-text/","section":"post","tags":["tmp-not-organize"],"title":"D13_08_combine-each-mindmap-text","type":"post","url":"/post/code/python/00_tmp-not-organize/d13_08_combine-each-mindmap-text/","weight":0,"wordcount":789},{"author":null,"categories":null,"content":"剪貼簿圖片轉 Markdown 工具 這是一個 Python 工具，可以將剪貼簿中的圖片保存為 JPG 格式，並自動創建包含這些圖片的 Markdown 文件。\n功能特色 🖼️ 從剪貼簿獲取圖片並保存為 JPG 格式 📝 自動創建 Markdown 文件並插入圖片 ⌨️ 使用快捷鍵操作（F9 保存圖片，F7 完成文件） 🔄 支援連續創建多個 Markdown 文件 📁 自動創建圖片目錄並組織文件 安裝需求 確保您的系統已安裝以下 Python 套件：\npip install Pillow keyboard tkinter 系統需求 Python 3.6 或更高版本 Windows 系統（keyboard 套件在 Windows 上運行最佳） 使用方法 主要應用程式 (app.py) 執行主程式：\npython app.py 在彈出的對話框中輸入 Markdown 檔案名稱\n使用以下快捷鍵操作：\nF9: 將剪貼簿中的圖片保存並添加到 Markdown 文件 F7: 完成當前 Markdown 文件的創建 完成一個文件後，程式會再次詢問下一個檔案名稱，可以繼續創建更多文件\n簡單版本 (v1_clipboard-pic-ok.py) 如果您只需要將剪貼簿圖片保存為 JPG 文件：\npython 00_version/v1_clipboard-pic-ok.py 這會將剪貼簿中的圖片保存為帶時間戳的 JPG 文件。\n文件結構 app/\r├── app.py # 主要應用程式\r├── 00_version/\r│ └── v1_clipboard-pic-ok.py # 簡單版本\r├── 00_issue/\r│ └── issue.txt # 專案說明\r└── README.md # 本文件 工作流程 啟動程式: 執行 python app.py 輸入檔案名稱: 在對話框中輸入要創建的 Markdown 檔案名稱 準備圖片: 將圖片複製到剪貼簿（例如：截圖、複製圖片等） 保存圖片: 按 F9 鍵將剪貼簿圖片保存並添加到 Markdown 重複步驟 3-4: 繼續添加更多圖片 完成文件: 按 F7 鍵完成當前 Markdown 文件的創建 創建新文件: 程式會詢問下一個檔案名稱，可以繼續創建更多文件 輸出格式 圖片會保存在 images/ 目錄中 圖片檔案名稱格式：{檔案名}_{ …","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D15_01_clipboard-to-jpg\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"59ce8953444e87e47a35008322d83f31","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d15_01_clipboard-to-jpg/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_tmp-not-organize/d15_01_clipboard-to-jpg/","section":"post","tags":["tmp-not-organize"],"title":"D15_01_clipboard-to-jpg","type":"post","url":"/post/code/python/00_tmp-not-organize/d15_01_clipboard-to-jpg/","weight":0,"wordcount":802},{"author":null,"categories":null,"content":"AI 問答記錄搜尋與整理工具 這是一個使用 PowerShell 腳本自動搜尋、整理和生成 AI 問答記錄樹狀結構的工具。\n功能特色 🔍 使用 Everything 搜尋引擎快速搜尋 AI 問答記錄檔案 📁 按日期自動分類整理搜尋結果 🔗 自動提取 HTML 檔案中的 AI 對話 URL 📊 生成美觀的樹狀結構 HTML 報告 ⚡ 支援豆包 (Doubao) 和 AIQA 兩種 AI 平台格式 專案結構 app/\r├── app.ps1 # 主要 PowerShell 腳本\r├── tree-hierarchy.html # 生成的樹狀結構報告\r├── search_results_shortcuts/ # 按日期分類的搜尋結果捷徑\r│ ├── 2025-04-01/\r│ ├── 2025-04-03/\r│ ├── 2025-04-12/\r│ └── ...\r└── 00_version/ # 版本備份 系統需求 Windows 作業系統 PowerShell 5.0 或更高版本 Everything 搜尋引擎 (ES-1.1.0.10 或更高版本) 安裝與設定 安裝 Everything 搜尋引擎\n下載並安裝 Everything 確保 es.exe 位於指定路徑：S:\\00_often\\search\\Everything\\cmd\\ES-1.1.0.10\\es.exe 設定搜尋路徑\n編輯 app.ps1 中的 $pathLimit 變數 設定您要搜尋的目標目錄路徑 調整搜尋參數\n修改 $searchPattern 以調整檔案搜尋模式 修改 $dateRange 以設定日期範圍 使用方法 執行腳本\n.\\app.ps1 查看結果\n搜尋結果會自動按日期分類存放在 search_results_shortcuts/ 目錄 樹狀結構報告會生成為 tree-hierarchy.html 搜尋設定說明 搜尋模式 檔案類型：支援 .doubao.html 和 .aiqa.*.html 格式 日期範圍：預設搜尋 2025-02-01 到 2025-05-30 路徑限制：可指定特定目錄進行搜尋 URL 提取規則 豆包格式：提取 id=\u0026amp;quot;doubaoURL\u0026amp;quot; 中的連結 AIQA 格式：提取 id=\u0026amp;quot;chatGPTURL\u0026amp;quot; 中的連結 輸出格式 檔案 …","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D24_03_search-recent-aiqa-doubao-by-everything-ps1\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"0c137e131f05ba055d77bee9fbb77943","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d24_03_search-recent-aiqa-doubao-by-everything-ps1/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_tmp-not-organize/d24_03_search-recent-aiqa-doubao-by-everything-ps1/","section":"post","tags":["tmp-not-organize"],"title":"D24_03_search-recent-aiqa-doubao-by-everything-ps1","type":"post","url":"/post/code/python/00_tmp-not-organize/d24_03_search-recent-aiqa-doubao-by-everything-ps1/","weight":0,"wordcount":839},{"author":null,"categories":null,"content":"HTML 文件分割工具 這是一個用於將大型 HTML 文件分割成多個小文件的 Python 工具，特別適用於處理包含題目和章節的 HTML 文件。\n功能特色 🔧 自動識別 HTML 文件中的標題結構（H1 和 H3 標題） 📝 智能文件名清理和格式化 🎯 支援題目編號提取和格式化 📁 自動創建輸出目錄 🌐 支援中文文件名和內容 專案結構 app/\r├── app.py # 主程式文件\r├── book-chapter.html # 輸入的 HTML 文件\r├── memo.markdown # 專案備忘錄\r├── output/ # 輸出目錄\r│ ├── 01.html\r│ ├── 02.html\r│ └── ...\r├── 112-data-info-book-chapter-backup/ # 備份目錄\r│ ├── 112-data-info-book-chapter.html\r│ └── output/ # 備份輸出\r└── README.md # 本文件 安裝需求 Python 版本 Python 3.6 或更高版本 依賴套件 pip install beautifulsoup4 使用方法 1. 準備輸入文件 將要分割的 HTML 文件命名為 book-chapter.html 並放置在專案根目錄。\n2. 執行程式 python app.py 3. 查看結果 分割後的 HTML 文件將保存在 output/ 目錄中，每個文件對應一個章節或題目。\n程式功能說明 主要函數 clean_filename(filename) 清理文件名，移除特殊字符 保留字母、數字和中文字符 將多個連續的 \u0026amp;lsquo;-\u0026amp;rsquo; 替換為單個 \u0026amp;lsquo;-\u0026amp;rsquo; extract_question_number(filename) 提取題目編號 支援 \u0026amp;ldquo;題目-數字\u0026amp;rdquo; 和 \u0026amp;ldquo;數字-題目\u0026amp;rdquo; 兩種格式 format_number(number) 格式化數字，為 1-9 的數字添加前導零 extract_number_prefix(title) 提取標題中的數字前綴 標準化為 \u0026amp;ldquo;x-x-0\u0026amp;rdquo; 格式 split_and_save_html(html_content) 主要分割函數 識別 H1 和 H3 標 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\D28@2_split-big-data-info\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"20981d6572e3492d982ce600c096c5ab","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/d28@2_split-big-data-info/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/d28@2_split-big-data-info/","section":"post","tags":["exam---"],"title":"D28@2_split-big-data-info","type":"post","url":"/post/code/python/00_exam---/d28@2_split-big-data-info/","weight":0,"wordcount":869},{"author":null,"categories":null,"content":"考試題目標籤與簡答整合工具 這是一個用於處理考試題目文件的 Python 工具，主要功能是從文件路徑中提取標籤和章節信息，並將對應的簡答內容整合到原始文件中。\n功能概述 本工具主要執行以下操作：\n提取文件路徑標籤：從文件路徑中的 {標籤} 格式提取標籤信息 提取章節信息：從文件路徑中提取 Ch 開頭的章節編號 整合簡答內容：根據題目編號匹配對應的簡答文件，並將內容轉換為 Markdown 格式 添加提示信息：在文件末尾添加標準化的學習提示 項目結構 app/\r├── app.py # 主程序文件\r├── target.txt # 包含待處理文件路徑的文本文件\r├── 112-little-ans/ # 簡答文件目錄（HTML格式）\r│ ├── 1.html\r│ ├── 2.html\r│ └── ...\r├── output/ # 輸出文件目錄\r│ ├── 01.html\r│ ├── 02.html\r│ └── ...\r├── issue.markdown # 項目需求說明\r├── append-tag.md # 標籤追加說明\r└── README.md # 本說明文件 核心功能 1. 標籤提取 從文件路徑中提取 {標籤} 格式的標籤，例如：\n{easyeasy} → 提取 \u0026amp;ldquo;easyeasy\u0026amp;rdquo; {marknote} → 提取 \u0026amp;ldquo;marknote\u0026amp;rdquo; 2. 章節信息提取 從文件路徑中提取章節編號，例如：\nCh01-3資料表示法 → 提取 \u0026amp;ldquo;Ch01-3資料表示法\u0026amp;rdquo; 3. 簡答內容整合 根據題目編號匹配對應的簡答文件 將 HTML 格式的簡答轉換為 Markdown 格式 在原始文件末尾添加簡答內容 4. HTML 轉 Markdown 轉換 支援以下 HTML 標籤的轉換：\n\u0026amp;lt;br\u0026amp;gt; → 換行符 \u0026amp;lt;strong\u0026amp;gt; → **粗體** \u0026amp;lt;li\u0026amp;gt; → - 列表項 \u0026amp;lt;ul\u0026amp;gt; → 移除標籤 使用方法 1. 準備文件 確保以下文件存在：\ntarget.txt：包含待處理的 Markdown 文件路徑列表 112-little-ans/ 目錄：包含對應的簡答 HTML 文件 output/ 目錄：包含對應的輸出文件 2. 運行程序 python app.py 3.  …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\D28@3_get-filename-tag-append-into-final-part-in-content-----\\","expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"5cbfbe1df87cbdb2e8eb9d12e74b9bcf","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/d28@3_get-filename-tag-append-into-final-part-in-content-----/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/d28@3_get-filename-tag-append-into-final-part-in-content-----/","section":"post","tags":["exam---"],"title":"D28@3_get-filename-tag-append-into-final-part-in-content-----","type":"post","url":"/post/code/python/00_exam---/d28@3_get-filename-tag-append-into-final-part-in-content-----/","weight":0,"wordcount":1264},{"author":null,"categories":null,"content":"教師教學應用程式 專案描述 這是一個用於教師教學的 Python 應用程式專案。\n專案結構 app/\r├── 00_version/ # 版本控制目錄\r│ └── app___original___.lnk\r├── Q-readable-flow - 捷徑.lnk\r└── README.md 安裝與使用 系統需求 Python 3.x 其他依賴套件（待補充） 安裝步驟 克隆此專案到本地 進入專案目錄 安裝依賴套件： pip install -r requirements.txt 執行方式 python main.py 功能特色 （待補充具體功能描述） 開發者 專案創建者：[您的姓名] 授權 此專案採用 [授權類型] 授權。\n聯絡方式 如有問題或建議，請聯絡：[您的聯絡方式]\n最後更新：2024年\n","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D29_04_teacher-tuts\\","expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"3619ea1516a2b8a1f095677aa33b88e6","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d29_04_teacher-tuts/","publishdate":"2025-10-08T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_tmp-not-organize/d29_04_teacher-tuts/","section":"post","tags":["tmp-not-organize"],"title":"D29_04_teacher-tuts","type":"post","url":"/post/code/python/00_tmp-not-organize/d29_04_teacher-tuts/","weight":0,"wordcount":204},{"author":null,"categories":null,"content":"QA 合併與分割工具 這是一個用於處理問答題目的 Python 工具，主要功能是將問題（Q.md）和答案（A.md）文件合併，並將合併後的內容分割成單獨的文件。\n功能特色 智能合併：自動將問題和答案按照題號配對合併 格式處理：自動處理複選題標記、圖片標記等特殊格式 連結統一：將所有 yamol.tw 連結統一為 item 連結 自動分割：將合併後的內容按題目分割成單獨的 Markdown 文件 文件命名：根據題目內容自動生成簡潔的文件名 項目結構 app/\r├── app.py # 主程式\r├── run.bat # Windows 批次執行檔\r├── 00_issue/ # 問題記錄\r├── 00_version/ # 版本歷史\r├── beforeQA/ # 範例資料\r├── output/ # 輸出目錄\r├── probQA/ # 問題資料\r└── test/ # 測試資料 使用方法 方法一：使用批次檔（推薦） 將您的 Q.md 和 A.md 文件放在同一個資料夾中 在該資料夾中執行 run.bat 程式會自動處理並在 output/ 資料夾中生成結果 方法二：直接執行 Python python app.py \u0026amp;lt;工作目錄路徑\u0026amp;gt; 例如：\npython app.py ./test 輸入文件格式 Q.md（問題文件） [1 袋中有 10 顆球，上標有 A、B、C、D、E 字母各有兩顆，今自袋中任取兩顆球（不考慮順序），共有幾個樣本點？](https://app.yamol.tw/exam/112888) (A) 10 (B) 15 (C) 45 (D) 252 答案：[B](https://app.yamol.tw/item/3049560) [2 從一副 52 張牌的撲克牌中隨機抽取兩張牌（不放回），兩張都是 A 的機率為何？](https://app.yamol.tw/exam/112888) ... A.md（答案文件） ### 第1题 **题目分析**：袋中有5种字母（A-E），每种2颗，共10颗球。任取2颗（不考虑顺序），求样本点个数。 **思考过程**： - 相同字母的球视为同一类，分为两类情况： 1. **同字母**：5种（A、B、C、D、E各取2颗），共5个样本点。 2. **不同字母**：从5种字母中选2种，组合数为 \\( C_5^2 …","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\D30_06_combinQA-new\\","expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"53b20e4126a1f65d6c086e91cb231c24","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/d30_06_combinqa-new/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_tmp-not-organize/d30_06_combinqa-new/","section":"post","tags":["tmp-not-organize"],"title":"D30_06_combinQA-new","type":"post","url":"/post/code/python/00_tmp-not-organize/d30_06_combinqa-new/","weight":0,"wordcount":1288},{"author":null,"categories":null,"content":"Ditto 剪貼簿提取工具 這是一個用於從 Ditto 剪貼簿管理軟體中提取和整理剪貼簿內容的 Python 工具。該工具可以將剪貼簿歷史記錄轉換為結構化的 Markdown 文件，並支援圖片內容的提取和處理。\n功能特色 📋 剪貼簿歷史提取：從 Ditto 資料庫中讀取剪貼簿歷史記錄 📝 Markdown 轉換：將文字內容轉換為結構化的 Markdown 格式 🖼️ 圖片處理：支援提取和轉換剪貼簿中的圖片內容 📅 日期分組：按日期自動分組整理內容 🔄 重複內容過濾：智能過濾重複的剪貼簿內容 📁 自動檔案組織：創建按日期命名的資料夾結構 ⚡ 批次處理：支援大量歷史資料的批次處理 系統需求 Python 3.6+ Windows 作業系統（需要 Ditto 軟體） 以下 Python 套件： sqlite3（內建模組） PIL (Pillow) numpy opencv-python（可選，用於圖片傾斜校正） pywin32（用於 Windows 剪貼簿操作） 安裝依賴 pip install Pillow numpy opencv-python pywin32 檔案結構 app/\r├── app.py # 主要的提取程式\r├── split-md.py # Markdown 分割工具\r├── ditto.bat # 批次執行腳本\r├── ditto_output/ # 輸出目錄\r│ ├── 20250901/ # 按日期分組的資料夾\r│ ├── 20250902/\r│ └── ...\r└── README.md # 說明文件 使用方法 1. 基本使用 執行批次檔案來提取剪貼簿內容：\nditto.bat 或者直接執行 Python 腳本：\npython app.py 2. 分割 Markdown 檔案 如果您有一個大型的 Markdown 檔案需要分割：\npython split-md.py \u0026amp;#34;path/to/your/markdown/file.md\u0026amp;#34; 程式功能說明 app.py - 主要提取程式 資料庫連接：連接到 Ditto 的 SQLite 資料庫 時間戳轉換：將各種時間戳格式轉換為可讀的日期時間 內容去重：智能過濾重複的剪貼簿內容 圖片處理：提取並轉換 CF_DIB 格式的圖片資料 Markdown 生成：創建結構化的 Markdown …","date":1759881600,"dir":"post\\code\\python\\00_target\\ditto-extract\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":["target"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"294e0e186c79095f218f9de285ebbe3b","permalink":"https://wikihuangblog.github.io/post/code/python/00_target/ditto-extract/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_target/ditto-extract/","section":"post","tags":["target"],"title":"ditto-extract","type":"post","url":"/post/code/python/00_target/ditto-extract/","weight":0,"wordcount":1108},{"author":null,"categories":null,"content":"Everything Bookmark to BAT 轉換工具 這是一個將 Everything 搜尋引擎的書籤（Bookmarks）和過濾器（Filters）轉換為批次檔案（.bat）的 Python 工具。\n功能說明 從 Everything 的 Bookmarks.csv 和 Filters.csv 檔案中讀取搜尋條件 將每個搜尋條件轉換為獨立的 .bat 檔案 自動處理檔案名稱的合法化（移除非法字元、限制長度） 處理搜尋字串中的特殊字元（如引號、管道符號） 避免重複生成相同內容的檔案 檔案結構 app/\r├── app.py # 主要程式檔案\r├── Bookmarks.csv # Everything 書籤檔案\r├── Filters.csv # Everything 過濾器檔案\r├── 00_output/ # 生成的 .bat 檔案輸出目錄\r├── 00_issue/ # 專案說明文件\r├── backup/ # 備份目錄\r└── pic/ # 圖片資源 使用方法 1. 環境需求 Python 3.x Everything 搜尋引擎（安裝在 C:\\Program Files\\Everything\\） 2. 執行方式 python app.py 3. 程式功能 程式會執行以下操作：\n讀取書籤檔案：從 Everything 的 Bookmarks.csv 讀取搜尋條件 生成 BAT 檔案：為每個書籤創建對應的 .bat 檔案 檔案命名規則： 使用日期前綴（YYYYMMDD_） 檔案名稱限制在 20 個字元內 移除非法檔案名稱字元 清理 CSV 檔案：只保留 Key 欄位有值的記錄 生成的 BAT 檔案格式 每個生成的 .bat 檔案內容如下：\n@echo off \u0026amp;#34;C:\\Program Files\\Everything\\Everything.exe\u0026amp;#34; -s \u0026amp;#34;搜尋條件\u0026amp;#34; 特殊字元處理 引號處理：將雙引號包裹的內容轉換為三重引號格式 管道符號：將 | 轉換為 ^| 以符合 Windows 批次檔案格式 檔案名稱清理：移除 \u0026amp;lt;\u0026amp;gt;:\u0026amp;quot;/\\|?* 等非法字元 輸出目錄 所有生成的 .bat 檔案會儲存在 00_output/ 目錄中，檔案命名格式為：\nYYYYMMDD_書籤名稱.bat …","date":1759881600,"dir":"post\\code\\python\\00_search\\everything-bookmark-to-bat\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"c840772f6fbb94685c1f4651b5d2f5eb","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/everything-bookmark-to-bat/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_search/everything-bookmark-to-bat/","section":"post","tags":["search"],"title":"everything-bookmark-to-bat","type":"post","url":"/post/code/python/00_search/everything-bookmark-to-bat/","weight":0,"wordcount":776},{"author":null,"categories":null,"content":"Everything 按存取日期排序搜尋工具 這是一個使用 Everything 搜尋工具來按檔案存取日期排序搜尋特定檔案的專案。\n專案概述 本專案提供了一個批次檔案腳本，使用 Everything 搜尋工具來搜尋指定路徑下的檔案，並按照存取日期進行排序。主要用於快速找到最近存取的應用程式檔案。\n功能特色 🔍 使用 Everything 搜尋工具進行高效檔案搜尋 📅 按存取日期排序（最新的在前） 🎯 支援正規表達式檔案名稱過濾 📁 可排除特定目錄 ⏰ 支援日期範圍過濾 🔧 可配置的搜尋參數 檔案結構 app/\r├── 00_version/ # 版本歷史檔案\r│ ├── app___original___.lnk # 原始應用程式連結\r│ ├── v1_filter-ok;wait-sort-by-data-access.bat\r│ ├── v2_sory-by-da-ok;wait-para-readable.bat\r│ ├── v3-fail.bat\r│ ├── v4_para.bat\r│ ├── v5_py-ps1.bat\r│ └── v6_date-format-from-year.bat\r├── pic/ # 圖片資源\r│ └── image-20250302121402797.png\r├── ref/ # 參考檔案\r│ └── statistic.bat\r├── issue.markdown # 問題記錄\r└── recent-app.bat # 主要執行檔案 使用方法 基本使用 確保已安裝 Everything 搜尋工具 執行 recent-app.bat 檔案 系統會自動開啟 Everything 並顯示搜尋結果 配置參數 在 recent-app.bat 中可以修改以下參數：\nset EVERYTHING_PATH=\u0026amp;#34;C:\\Program Files\\Everything\\Everything.exe\u0026amp;#34; # Everything 安裝路徑 set CONFIG_filter=-filter \u0026amp;#34;everything\u0026amp;#34; # 使用 everything 過濾器 set SEARCH_PATH=E:\\codeAll\\ # 搜尋路徑 set SEARCH_exclude=\u0026amp;#34;!\\00_version\\\u0026amp;#34; # 排除 …","date":1759881600,"dir":"post\\code\\python\\00_search\\everything-sort-by-date-access\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"7ea6f8f3157f4a049d520bcb4754b627","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/everything-sort-by-date-access/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_search/everything-sort-by-date-access/","section":"post","tags":["search"],"title":"everything-sort-by-date-access","type":"post","url":"/post/code/python/00_search/everything-sort-by-date-access/","weight":0,"wordcount":894},{"author":null,"categories":null,"content":"資料夾頻率分析工具 (Frequency Folder Analyzer) 專案簡介 這是一個用於分析資料夾使用頻率的 Python 工具，主要用於統計和分析不同類型資料夾的出現頻率，並生成具有可點擊連結的 Markdown 報告。\n功能特色 📊 智能路徑分析：自動識別和分類不同類型的資料夾路徑 🎯 分類統計：分別統計 CodeALL、ProjProj、Sidebar 三種類型的資料夾 📝 Markdown 輸出：生成具有可點擊連結的 Markdown 格式報告 🔍 路徑過濾：智能過濾無意義的資料夾名稱（如 output、projproj、dist 等） 📏 路徑長度限制：根據不同類型設定最小路徑長度要求 專案結構 app/\r├── app.py # 主程式檔案\r├── issue.md # 需求說明文件\r├── results-0222.md # 2月22日分析結果\r├── results-0224.md # 2月24日分析結果\r├── 00_version/ # 版本歷史\r│ ├── v1_fequecy-ok.py # 第一版：基本頻率統計\r│ ├── v2.@1_filter-fail.py # 第二版：過濾功能（失敗版本）\r│ └── v2.0_different-keyword-filter-ok;wait-different-length-filter.py # 第二版：成功版本\r├── pic/ # 圖片資源\r│ ├── image-20250222145329252.png\r│ └── image-20250222151322429.png\r└── src/ # 原始資料檔案\r├── 0216-0222.txt\r├── 0222.txt\r├── 0223-ori.txt\r├── 0223.txt\r└── 0224.txt 使用方法 基本使用 將要分析的資料檔案放在 src/ 資料夾中 修改 app.py 中的檔案路徑： file_path = \u0026amp;#34;src/0224.txt\u0026amp;#34; # 更改為您的檔案名稱 執行程式： python app.py 查看生成的 results.md 檔案 分析規則 程式會根據以下規則進行分析：\n資料夾類型分類 CodeALL 資料夾：包含 \u0026amp;ldquo;codeAll\u0026amp;rdquo; 的路徑 ProjProj 資料 …","date":1759881600,"dir":"post\\code\\python\\00_search\\frequeny-folder\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"ab57d370575db1b99e1112e965976271","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/frequeny-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_search/frequeny-folder/","section":"post","tags":["search"],"title":"frequeny-folder","type":"post","url":"/post/code/python/00_search/frequeny-folder/","weight":0,"wordcount":1095},{"author":null,"categories":null,"content":"檔案路徑關鍵字提取與統計工具 這是一個用於從檔案路徑中提取大括號內的關鍵字，並生成關鍵字頻率統計圖表的 Python 工具。\n功能特色 🔍 關鍵字提取：從檔案路徑中自動提取大括號 {} 內的關鍵字 📊 頻率統計：統計每個關鍵字的出現頻率 🖼️ 視覺化輸出：生成包含關鍵字頻率表格的圖片檔案 🔄 多關鍵字支援：支援單個檔案路徑中包含多個關鍵字的情況 📝 自動命名：根據提取的關鍵字自動生成輸出檔案名稱 檔案結構 app/\r├── app.py # 主程式檔案\r├── path-with-keyword-in-bracket.txt # 輸入檔案（包含檔案路徑列表）\r├── path-with-keyword-in-bracket-old.txt # 舊版輸入檔案\r├── todo.md # 待辦事項和問題記錄\r├── EaseUS_2024_10_15_10_55_59.jpg # 範例輸出圖片\r└── README.md # 說明文件 安裝需求 Python 套件 pip install Pillow 系統需求 Python 3.6+ Windows 系統（字體路徑設定為 Windows 字體） 使用方法 1. 準備輸入檔案 將包含檔案路徑的列表儲存為 path-with-keyword-in-bracket.txt，每行一個路徑。\n2. 執行程式 python app.py 3. 查看結果 程式會生成一個以 !!00_index_{關鍵字列表}.jpg 格式命名的圖片檔案，包含：\n關鍵字頻率統計表格 按頻率排序的關鍵字列表 視覺化的表格格式 輸入格式範例 單一關鍵字 [v]04_四、請由小至大列出下述函數之複雜度：1000000,_nlogn,_n2__,_(3-2)n__,_.QQ.lvv.{algorithm}.md 多個關鍵字 [v]01_一、matrix-pointer-reverse.QQ.lvv.{matrix,pointer}.md 輸出格式 程式會生成類似以下格式的檔案名稱：\n!!00_index_{algorithm_cloud_code_counter_dict_array_hand_dict_sum_dynamic_html_if_loop_matrix_pointer_matrix}.jpg 程式特色 關鍵字處理 自動識別大括號 {} …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\grouped-path-bracket-extract\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"53e083c73b8da46867eca946e087afc3","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/grouped-path-bracket-extract/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/grouped-path-bracket-extract/","section":"post","tags":["exam---"],"title":"grouped-path-bracket-extract","type":"post","url":"/post/code/python/00_exam---/grouped-path-bracket-extract/","weight":0,"wordcount":947},{"author":null,"categories":null,"content":"HTML 轉 Markdown 工具 這是一個專門用於將 HTML 內容轉換為 Markdown 格式的 Python 工具，特別針對豆包（Doubao）聊天記錄進行優化處理。\n功能特色 HTML 到 Markdown 轉換：使用 BeautifulSoup 和 html2text 庫進行高品質轉換 智能內容處理：自動識別並處理「下一題」等關鍵詞，將其轉換為標題格式 格式清理：移除不必要的 HTML 標籤和樣式，保持內容簡潔 中文支援：完整支援繁體中文和簡體中文內容 代碼塊處理：特別優化代碼標籤的處理，確保代碼格式正確 專案結構 app/\r├── app.py # 主程式文件\r├── input.html # 輸入的 HTML 文件\r├── output.md # 輸出的 Markdown 文件\r├── README.md # 專案說明文件\r├── 00_different-input/ # 不同輸入範例\r│ ├── decimal-to-multi-base/ # 十進制轉多進制範例\r│ └── 程序算法小考官---.doubao.html\r├── 00_version/ # 版本歷史\r│ ├── v1.py # 第一版（空文件）\r│ ├── v2_newQ-translate.py # 第二版（空文件）\r│ └── v3_newQ-as-h3-ok.py # 第三版（完整功能）\r└── split_sections/ # 分割後的章節文件 安裝需求 確保您的系統已安裝以下 Python 套件：\npip install beautifulsoup4 html2text 使用方法 基本使用 將要轉換的 HTML 文件命名為 input.html 並放在專案根目錄 執行主程式： python app.py 轉換完成後，結果將保存在 output.md 文件中 自定義輸入輸出文件 您可以修改 app.py 中的文件路徑：\nif __name__ == \u0026amp;#34;__main__\u0026amp;#34;: input_file = \u0026amp;#34;your_input.html\u0026amp;#34; # 修改輸入文件名 output_file = \u0026amp;#34;your_output.md\u0026amp;#34; # 修改輸出文件名 main(input_file, output_file) print(f\u0026amp;#34;轉換 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\html-to-md-nextQQ-split\\","expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"2c774fb6313c4188beedf5cb13385bf4","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/html-to-md-nextqq-split/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/html-to-md-nextqq-split/","section":"post","tags":["exam---"],"title":"html-to-md-nextQQ-split","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/html-to-md-nextqq-split/","weight":0,"wordcount":1221},{"author":null,"categories":null,"content":"HTML 轉 PDF/Markdown 轉換工具 這是一個 Python 工具，可以將 HTML 檔案批量轉換為 PDF 和 Markdown 格式。\n功能特色 🔄 批量轉換 HTML 檔案為 PDF 和 Markdown 格式 📁 支援目錄結構處理（最多處理 2 層子目錄） 🎨 自定義 CSS 樣式，優化 PDF 輸出格式 📄 支援 B5 頁面大小，最小邊距設定 🚀 簡單易用的批次執行腳本 系統需求 Python 套件 pip install pdfkit html2text weasyprint markdown 外部工具 wkhtmltopdf: 用於 HTML 轉 PDF 轉換 下載地址: https://wkhtmltopdf.org/downloads.html 預設安裝路徑: C:\\Program Files\\wkhtmltopdf\\bin\\wkhtmltopdf.exe 檔案結構 app/\r├── app.py # 主要轉換程式（使用 pdfkit）\r├── app2md.py # 替代轉換程式（使用 weasyprint）\r├── custom.css # 自定義 CSS 樣式檔案\r├── run.bat # Windows 批次執行腳本\r├── issue.txt # 專案說明\r├── target/ # HTML 檔案輸入目錄\r├── target---1/ # 備用輸入目錄\r├── target-ori/ # 原始檔案目錄\r└── output_pdf/ # 輸出目錄（自動建立） 使用方法 方法一：使用批次腳本（推薦） # 在 Windows 上直接執行 run.bat 方法二：直接執行 Python 程式 # 使用 app.py（pdfkit 版本） python app.py target # 使用 app2md.py（weasyprint 版本） python app2md.py 程式說明 app.py 使用 pdfkit 和 wkhtmltopdf 進行轉換 支援自定義 CSS 樣式 設定 B5 頁面大小，最小邊距 同時產生 PDF 和 Markdown 檔案 app2md.py 使用 weasyprint 進行轉換 先將 HTML 轉為 Markdown，再轉為 PDF 支援 A4 頁面大小 內建 CSS 樣式 輸出設定 PDF 設 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\pdf-mindmap-@@flow\\html-to-md-to-pdf\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"a23a9ecc5f01cc84de5c874c3bb5323a","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/pdf-mindmap-@@flow/html-to-md-to-pdf/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/pdf-mindmap-@@flow/html-to-md-to-pdf/","section":"post","tags":["exam---"],"title":"html-to-md-to-pdf","type":"post","url":"/post/code/python/00_exam---/pdf-mindmap-@@flow/html-to-md-to-pdf/","weight":0,"wordcount":775},{"author":null,"categories":null,"content":"LinkedIn 主題檔案整理工具 這是一個用於自動整理 LinkedIn 相關檔案的 Python 工具，可以根據檔案名稱的前綴和後綴來分組並移動檔案到對應的資料夾中。\n功能特色 🔄 自動識別檔案名稱的前綴（數字_）和後綴（_@@、.lnk、.jpg、.zip 等） 📁 根據核心檔案名稱自動分組檔案 🚀 將相同主題的檔案移動到對應的資料夾中 🛡️ 支援多種檔案格式（.jpg、.lnk、.zip、.html、.srt） ⚡ 提供批次執行腳本 檔案說明 主要腳本 linkedin-topic-move-same-name-into-folder_trim-prefix-suffix.py\n完整版本，包含自動創建資料夾功能 支援更多檔案格式（包含 .zip） linkedin-topic-move-same-name-into-folder_trim-prefix-suffix-no-auto-create.py\n簡化版本，不自動創建資料夾 支援基本檔案格式（.jpg、.lnk） 輔助檔案 cmd/run.bat - Windows 批次執行腳本 regex101.url - 正則表達式測試工具連結 使用方法 方法一：直接執行 Python 腳本 python linkedin-topic-move-same-name-into-folder_trim-prefix-suffix.py \u0026amp;#34;目標資料夾路徑\u0026amp;#34; 方法二：使用批次腳本（Windows） 將 run.bat 複製到您要整理的資料夾中 雙擊執行 run.bat 檔案命名規則 工具會自動識別以下格式的檔案：\n前綴格式：數字_ （例如：001_、123_） 後綴格式： _@@ .lnk .jpg .zip .html .srt 範例 假設您有以下檔案：\n001_LinkedIn_Marketing_@@.jpg\r002_LinkedIn_Marketing_@@.lnk\r003_LinkedIn_Marketing_@@.zip\r001_LinkedIn_Networking_@@.jpg\r002_LinkedIn_Networking_@@.lnk 執行後會創建以下資料夾結構：\nLinkedIn_Marketing/\r├── 001_LinkedIn_Marketing_@@.jpg\r├── …","date":1759881600,"dir":"post\\code\\python\\00_video\\linkedin-topic-move-same-name-into-folder_trim-prefix-suffix\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"505d4b97f0fed3052324799fcb77e419","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/linkedin-topic-move-same-name-into-folder_trim-prefix-suffix/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/linkedin-topic-move-same-name-into-folder_trim-prefix-suffix/","section":"post","tags":["video"],"title":"linkedin-topic-move-same-name-into-folder_trim-prefix-suffix","type":"post","url":"/post/code/python/00_video/linkedin-topic-move-same-name-into-folder_trim-prefix-suffix/","weight":0,"wordcount":680},{"author":null,"categories":null,"content":"LNK 目標資料夾 Markdown 檔案查找工具 這是一個用於處理 Windows 快捷方式（.lnk）檔案的 Python 工具，能夠自動查找快捷方式指向的資料夾中的 Markdown 檔案，並更新快捷方式的目標路徑。\n功能說明 此工具的主要功能是：\n讀取快捷方式列表：從文字檔案中讀取 .lnk 檔案路徑列表 解析快捷方式目標：獲取每個 .lnk 檔案指向的目標資料夾路徑 查找 Markdown 檔案：在目標資料夾中搜尋 .md 或 .markdown 檔案 更新快捷方式： 如果找到 Markdown 檔案，將快捷方式目標更新為該 Markdown 檔案 如果未找到 Markdown 檔案，將原始檔案重命名為 ___no-md-find.lnk 檔案結構 app/\r├── app.py # 主要程式檔案\r├── path-link.txt # 包含 .lnk 檔案路徑的輸入檔案\r├── blog-lnk.txt # 另一個 .lnk 檔案路徑列表\r├── issue.markdown # 專案需求說明文件\r├── all2024.txt # 2024年相關檔案列表\r├── path-link-ori.txt # 原始路徑檔案備份\r├── blog-lnk-ori.txt # 原始部落格連結檔案備份\r└── README.md # 本說明文件 系統需求 Python 3.x Windows 作業系統 pywin32 套件（用於處理 Windows 快捷方式） 安裝依賴 pip install pywin32 使用方法 準備輸入檔案：\n將要處理的 .lnk 檔案路徑列表放入 path-link.txt 檔案中 每行一個路徑，確保路徑以 .lnk 結尾 執行程式：\npython app.py 查看結果：\n程式會輸出處理結果，包括成功更新的快捷方式和未找到 Markdown 檔案的快捷方式 未找到 Markdown 檔案的快捷方式會被重命名為 ___no-md-find.lnk 程式功能詳解 主要函數 get_shortcut_target(shortcut_path)：獲取 .lnk 檔案的目標路徑 find_markdown_files(folder_path)：在指定資料夾中查找 .md 或 .markdown …","date":1759881600,"dir":"post\\code\\python\\00_video\\lnk-target-folder-find-markdown\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"a92c74f9c1d53df9807a89c159ce8a86","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/lnk-target-folder-find-markdown/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/lnk-target-folder-find-markdown/","section":"post","tags":["video"],"title":"lnk-target-folder-find-markdown","type":"post","url":"/post/code/python/00_video/lnk-target-folder-find-markdown/","weight":0,"wordcount":937},{"author":null,"categories":null,"content":"本地翻譯伺服器 (Local Translation Server) 這是一個基於 Flask 的本地翻譯伺服器，專門為 Tampermonkey 腳本提供英文到繁體中文的翻譯服務。主要用於 JanitorAI 聊天頁面的即時翻譯功能。\n功能特色 🌐 本地翻譯服務：使用 Google Translate API 提供翻譯服務 🔄 批量句子翻譯：支援多句子同時翻譯，使用 ||| 分隔符 🎯 中英對照顯示：翻譯結果以中英對照格式呈現 ⌨️ 快捷鍵操作：支援 F8 快捷鍵觸發翻譯 🚀 CORS 支援：允許跨域請求，配合 Tampermonkey 腳本使用 專案結構 app/\r├── app.py # 主要翻譯伺服器 (支援句子分割)\r├── Virtuoso Final List Item Translate...js # Tampermonkey 腳本\r├── 00_version---py/ # Python 版本歷史\r│ ├── v1_only-single-string;wait-split-multi/\r│ └── v2_long-string-to-split.py\r├── 00_version--js/ # JavaScript 版本歷史\r│ ├── translate-final-section/\r│ ├── translate-v2/\r│ └── translate-v3/\r└── 00_readme/ # 說明文件 安裝與設定 1. 安裝 Python 依賴 pip install flask googletrans==4.0.0-rc1 flask-cors 2. 啟動翻譯伺服器 python app.py 伺服器將在 http://localhost:5008 啟動\n3. 安裝 Tampermonkey 腳本 安裝 Tampermonkey 瀏覽器擴展 將 Virtuoso Final List Item Translate (Google API, 中英對照)-1.2 .user.js 腳本添加到 Tampermonkey 確保腳本在 JanitorAI 聊天頁面 (https://janitorai.com/chats/1059445479) 上啟用 使用方法 翻譯伺服器 API 端點: POST /translate\n請求格式:\n{ …","date":1759881600,"dir":"post\\code\\python\\ch09_eng\\local-fetch-server-for-eng-translate\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":[""],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"ca517947efe715b7ed14bbeede944385","permalink":"https://wikihuangblog.github.io/post/code/python/ch09_eng/local-fetch-server-for-eng-translate/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/ch09_eng/local-fetch-server-for-eng-translate/","section":"post","tags":[""],"title":"local-fetch-server-for-eng-translate","type":"post","url":"/post/code/python/ch09_eng/local-fetch-server-for-eng-translate/","weight":0,"wordcount":961},{"author":null,"categories":null,"content":"Markdown 圖片提取工具 這是一個用於從 Markdown 文件中提取圖片並下載保存的 Python 工具。\n功能特點 🔍 自動掃描指定目錄下的所有 Markdown 文件 📥 提取 Markdown 文件中的圖片鏈接 💾 自動下載並保存圖片到本地 🌐 支持相對路徑和絕對路徑的圖片鏈接 📁 遞歸處理子目錄 🛡️ 自動處理文件名中的非法字符 🖼️ 統一將圖片保存為 JPG 格式 安裝要求 確保您的系統已安裝 Python 3.6 或更高版本，並安裝以下依賴包：\npip install requests 使用方法 命令行使用 python app.py \u0026amp;lt;根目錄路徑\u0026amp;gt; 使用示例 # 處理當前目錄下的所有 Markdown 文件 python app.py . # 處理指定目錄下的所有 Markdown 文件 python app.py /path/to/your/markdown/files 工作原理 掃描目錄：程序會掃描指定根目錄下的所有子目錄 查找 Markdown 文件：在每個目錄中查找 .md 文件 提取圖片鏈接：使用正則表達式 !\\[.*?\\]\\((.*?)\\) 提取 Markdown 中的圖片鏈接 處理 URL： 將相對路徑轉換為絕對路徑 移除查詢參數和錨點 統一文件名格式 下載保存：下載圖片並保存到對應的目錄中 文件結構 project/\r├── app.py # 主程序文件\r├── README.md # 說明文檔\r└── your_md_files/ # 您的 Markdown 文件目錄\r├── file1.md\r├── file2.md\r└── images/ # 提取的圖片將保存在這裡 注意事項 程序會將所有提取的圖片統一保存為 .jpg 格式 如果圖片文件名包含非法字符，會自動替換為下劃線 程序會自動創建必要的目錄結構 如果圖片下載失敗，會在控制台顯示錯誤信息 錯誤處理 如果未提供根目錄路徑參數，程序會顯示錯誤信息並退出 如果圖片下載失敗（HTTP 狀態碼非 200），會跳過該圖片並繼續處理其他圖片 程序會自動處理文件名中的特殊字符，確保文件可以正常保存 自定義配置 如果需要修改基礎 URL（用於處理相對路徑），請編輯 app.py 文件中的第 19 行：\nbase_url = …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\md-extract-jpg\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"af14e9f409bc5f8458ab051b89b21dba","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/md-extract-jpg/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/md-extract-jpg/","section":"post","tags":["exam---"],"title":"md-extract-jpg","type":"post","url":"/post/code/python/00_exam---/md-extract-jpg/","weight":0,"wordcount":661},{"author":null,"categories":null,"content":"Markdown 大綱提取工具 這是一個用於從多個 Markdown 檔案中提取標題並生成大綱的 Python 工具。該工具可以讀取多個 Markdown 檔案，提取其中的三級標題（###），並生成一個統一的目錄大綱，同時輸出為 Markdown 檔案和 PNG 圖片。\n功能特色 📁 從 input.txt 讀取多個 Markdown 檔案路徑 📝 提取每個檔案中的三級標題（###） 📋 生成統一的目錄大綱 💾 輸出為 Markdown 檔案（outline.md） 🖼️ 輸出為 PNG 圖片（outline.png） 🎨 自動套用美觀的 CSS 樣式 系統需求 Python 3.6+ Chrome 瀏覽器 ChromeDriver（需要與 Chrome 版本匹配） 安裝依賴 pip install selenium markdown2 使用方法 1. 準備輸入檔案 在專案根目錄創建 input.txt 檔案，每行包含一個 Markdown 檔案的完整路徑：\nD:\\00_EXAM\\00_dateExam\\02\\twport\\00_target\\112年度\\program\\112_資訊_資料結構與程式設計.markdown\rD:\\00_EXAM\\00_dateExam\\02\\twport\\00_target\\112年度\\security\\112.markdown\rD:\\00_EXAM\\00_dateExam\\02\\twport\\00_target\\112年度\\article\\memo.markdown 2. 執行程式 python app.py 3. 查看輸出 程式執行完成後，會生成以下檔案：\noutline.md - 包含提取的大綱內容 outline.png - 大綱的視覺化圖片 檔案結構 app/\r├── app.py # 主程式檔案\r├── input.txt # 輸入檔案路徑列表\r├── outline.md # 輸出的大綱 Markdown 檔案\r├── outline.png # 輸出的大綱圖片\r├── 00_issue/ # 問題記錄目錄\r│ └── issue.markdown # 問題說明檔案\r└── 00_version/ # 版本記錄目錄\r└── app___original___.lnk …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\big-md-to-part@@flow\\md-extract-toc-for-exam-write-outline\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"63b778d37f356b7420229fc796a0cb73","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/big-md-to-part@@flow/md-extract-toc-for-exam-write-outline/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/big-md-to-part@@flow/md-extract-toc-for-exam-write-outline/","section":"post","tags":["exam---"],"title":"md-extract-toc-for-exam-write-outline","type":"post","url":"/post/code/python/00_exam---/big-md-to-part@@flow/md-extract-toc-for-exam-write-outline/","weight":0,"wordcount":927},{"author":null,"categories":null,"content":"HTML 合併工具 這是一個用於合併 HTML 文件的 Python 工具，專門設計用於處理 YAMOL 問答系統的 HTML 文件。\n功能描述 此工具可以自動合併兩個 HTML 文件：\n來源文件：包含問題內容的 HTML 文件（*.html，排除 .aiqa.html） 目標文件：包含 AI 答案的 HTML 文件（*.aiqa.html） 合併後會將來源文件中的問題內容插入到目標文件的開頭，並自動刪除原始文件。\n專案結構 app/\r├── app.py # 主要執行文件（最新版本）\r├── go.bat # Windows 批次執行檔\r└── 00_version/ # 版本歷史\r├── v1_with-name-merge-ok.py\r├── v2_any-extension-match.py\r├── v3_prefix-into-new-merge-filename.py\r├── v4_only-combine-ans.py\r└── v5_merge-from-group.py 版本演進 v1 - 基礎合併功能 固定文件名合併（xxx.html + target.aiqa.html） 基本的 HTML 解析和合併 v2 - 動態文件匹配 支援任意 .html 文件作為來源 支援任意 .aiqa.html 文件作為目標 自動文件發現功能 v3 - 前綴提取功能 從來源文件名提取數字前綴 將前綴添加到合併後的文件名 自動刪除原始文件 v4 - 精確內容提取 只提取 \u0026amp;lt;a class=\u0026amp;quot;no-tw\u0026amp;quot;\u0026amp;gt; 元素 更精確的內容選擇 v5 - 群組處理 支援處理整個目錄結構 批量處理多個子目錄 最新版本 (app.py) 完整的目錄遞歸處理 錯誤處理和日誌記錄 支援多層目錄結構 安裝需求 pip install beautifulsoup4 使用方法 方法一：使用批次檔（Windows） go.bat 方法二：直接執行 Python python app.py \u0026amp;#34;目標目錄路徑\u0026amp;#34; 使用範例 # 處理單一目錄 python app.py \u0026amp;#34;C:\\path\\to\\your\\folder\u0026amp;#34; # 處理包含多個子目錄的根目錄 python app.py \u0026amp;#34;C:\\path\\to\\root\\folder\u0026amp;#34; 工 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\merge-yamol-Q-ai-ans\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"f88e15a9d04b7764bdc2642bbd8447b5","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/merge-yamol-q-ai-ans/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/merge-yamol-q-ai-ans/","section":"post","tags":["exam---"],"title":"merge-yamol-Q-ai-ans","type":"post","url":"/post/code/python/00_exam---/merge-yamol-q-ai-ans/","weight":0,"wordcount":927},{"author":null,"categories":null,"content":"月曆自訂大小生成器 一個使用 Python 和 Matplotlib 生成自訂大小月曆的工具，支援 A4 橫向格式輸出，適合列印使用。\n功能特色 🗓️ 生成單月或整年月曆 📄 A4 橫向格式，適合列印 🎨 可自訂網格顏色和背景顏色 📱 高解析度輸出 (300 DPI) 📋 支援 PNG 和 PDF 格式輸出 🔧 簡潔的程式碼結構 安裝需求 確保您的系統已安裝以下 Python 套件：\npip install matplotlib 使用方法 基本使用 生成單月日曆 from app import create_calendar # 生成 2025 年 1 月的日曆 create_calendar(2025, 1, cell_size=1, grid_color=\u0026amp;#39;black\u0026amp;#39;, block_color=\u0026amp;#39;white\u0026amp;#39;) 生成整年月曆 from app import create_year_calendar # 生成 2025 年整年的日曆（PDF 格式） create_year_calendar(2025, cell_size=1, grid_color=\u0026amp;#39;black\u0026amp;#39;, block_color=\u0026amp;#39;white\u0026amp;#39;) 參數說明 year: 年份 month: 月份（1-12，僅用於單月生成） cell_size: 格子大小（預設為 1） grid_color: 網格線顏色（預設為 \u0026amp;lsquo;black\u0026amp;rsquo;） block_color: 背景顏色（預設為 \u0026amp;lsquo;white\u0026amp;rsquo;） 輸出格式 單月日曆: 輸出為 calendar.png 檔案 整年月曆: 輸出為 calendar_YYYY.pdf 檔案（包含 12 個月的日曆） 檔案結構 app/\r├── app.py # 主要程式檔案\r├── README.md # 專案說明文件\r├── calendar.png # 生成的單月日曆圖片\r├── output/ # 輸出資料夾\r│ ├── calendar_2025.pdf # 生成的整年月曆 PDF\r│ ├── for-print.pdf # 列印用 PDF\r│ └── priiii.pdf # 其他輸出檔案\r├── issue/ # 問題和需求記錄\r│ ├── issue.txt …","date":1759881600,"dir":"post\\code\\python\\00_target\\monthly-calendar-custom-size\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["target"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"65a0848c1c191ca8da616c9b40012fd0","permalink":"https://wikihuangblog.github.io/post/code/python/00_target/monthly-calendar-custom-size/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_target/monthly-calendar-custom-size/","section":"post","tags":["target"],"title":"monthly-calendar-custom-size","type":"post","url":"/post/code/python/00_target/monthly-calendar-custom-size/","weight":0,"wordcount":774},{"author":null,"categories":null,"content":"應用程式移動工具 (Move App to CodeAll) 這是一個用於將應用程式從當前位置移動到 codeAll 目錄並建立雙向捷徑的 Python 工具。\n功能說明 將指定的資料夾移動到 codeAll 目錄結構中 在原始位置建立指向新位置的捷徑 在新位置建立指向原始位置的捷徑 自動建立版本控制資料夾 (00_version) 支援多種目標根目錄配置 系統需求 Windows 作業系統 Python 3.x pywin32 套件 (用於建立 Windows 捷徑) 安裝依賴 pip install pywin32 使用方法 方法一：使用批次檔 (推薦) go.bat \u0026amp;#34;C:\\path\\to\\your\\app\\folder\u0026amp;#34; 方法二：直接使用 Python python app.py \u0026amp;#34;C:\\path\\to\\your\\app\\folder\u0026amp;#34; 支援的目標類型 目前支援以下目標名稱：\napp - 移動到 E:\\codeAll\\python\\00_tmp-not-organize DIYDIY - 移動到 D:\\00_DIY\\kind\\00_tmp-not-organize 工作流程 移動資料夾：將指定的資料夾移動到 codeAll 目錄結構中 建立前向捷徑：在原始位置建立指向新位置的捷徑 (格式：{資料夾名稱}___codeAll___.lnk) 建立版本資料夾：在新位置建立 00_version 資料夾 建立後向捷徑：在 00_version 資料夾中建立指向原始位置的捷徑 (格式：{資料夾名稱}___original___.lnk) 目錄結構範例 移動前：\nC:\\MyProject\\\r└── app\\\r├── main.py\r└── config.json 移動後：\nE:\\codeAll\\python\\00_tmp-not-organize\\MyProject\\\r└── app\\\r├── main.py\r├── config.json\r└── 00_version\\\r└── app___original___.lnk\rC:\\MyProject\\\r└── app___codeAll___.lnk 錯誤處理 如果目標資料夾已存在，程式會顯示錯誤訊息並退出 如果指定的目標名稱不支援，程式會顯示支援的目標名稱清單 如果命令列參數不正確，程 …","date":1759881600,"dir":"post\\code\\python\\00_search\\move-app-from-current-to-codeAll\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"92647124ce12e148d98749c38dae6548","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/move-app-from-current-to-codeall/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_search/move-app-from-current-to-codeall/","section":"post","tags":["search"],"title":"move-app-from-current-to-codeAll","type":"post","url":"/post/code/python/00_search/move-app-from-current-to-codeall/","weight":0,"wordcount":630},{"author":null,"categories":null,"content":"考試題目分類移動工具 這是一個用於自動將考試題目根據題目前綴分類並移動到對應資料夾的 Python 工具。\n功能說明 本工具會讀取 category.txt 檔案中的分類對應表，然後掃描指定目錄中的所有資料夾，根據資料夾名稱的前兩位數字（題號）將資料夾移動到對應的課程類別資料夾中。\n檔案結構 app/\r├── app.py # 主程式檔案\r├── asset/\r│ └── category.txt # 題目分類對應表\r└── README.md # 說明文件 使用方法 1. 準備工作 確保您的目錄結構如下：\n根目錄包含 category.txt 檔案 根目錄包含需要分類的題目資料夾（例如：01_題目名稱、02_題目名稱 等） 2. 執行指令 python app.py \u0026amp;lt;根目錄路徑\u0026amp;gt; 例如：\npython app.py \u0026amp;#34;E:\\exam\\questions\u0026amp;#34; 3. 執行結果 程式會：\n讀取 category.txt 檔案建立分類對應表 掃描根目錄中的所有資料夾 根據資料夾名稱的前兩位數字查找對應的課程類別 創建課程類別資料夾（如果不存在） 將題目資料夾移動到對應的課程類別資料夾中 category.txt 檔案格式 檔案格式為 Tab 分隔的文字檔，第一行為標題行（會被跳過），後續每行包含：\n題號（1-40） 課程類別名稱 關鍵字（可選） 範例：\n題號\t課程類別\t關鍵字\r1\t計算機架構 (Computer Architecture)\tRISC、指令集、處理器設計策略\r2\t記憶體系統 (Memory Systems)\t存取速度、快取記憶體、主記憶體\r... 支援的課程類別 目前支援以下課程類別：\n計算機架構 (Computer Architecture) 記憶體系統 (Memory Systems) 作業系統 (Operating Systems) 數位邏輯設計 (Digital Logic Design) 網頁設計 (Web Design) 數位訊號處理 (Digital Signal Processing) 計算機網路 (Computer Networks) 資料結構 (Data Structures) 演算法 (Algorithms) 程式設計 (Programming) 行銷 (Marketing) …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\000_move-prefix\\move-exam-Q-by-prefix-to-group\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"659a923de53e7f9a7558c8a72dc50b7c","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/000_move-prefix/move-exam-q-by-prefix-to-group/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/000_move-prefix/move-exam-q-by-prefix-to-group/","section":"post","tags":["exam---"],"title":"move-exam-Q-by-prefix-to-group","type":"post","url":"/post/code/python/00_exam---/000_move-prefix/move-exam-q-by-prefix-to-group/","weight":0,"wordcount":878},{"author":null,"categories":null,"content":"文件整理工具集 這是一個用於自動整理和移動文件的 Python 工具集，主要用於將具有相同名稱前綴的文件移動到對應的資料夾中。\n功能特色 🗂️ 自動創建資料夾並移動同名文件 🎯 基於文件名前綴進行智能分類 🖥️ 提供圖形化界面 (GUI) 版本 📁 支援批量文件整理 🔄 支援命令行和 GUI 兩種使用方式 文件說明 主要工具 1. move-same-name-into-folder.py 功能: 將具有相同名稱的文件移動到對應的資料夾中\n自動提取文件名（去除副檔名和編號） 為每個文件創建對應的資料夾 將文件移動到新創建的資料夾中 使用方式:\npython move-same-name-into-folder.py 2. move-ch-folder.py 功能: 將資料夾重新命名並整理為章節格式\n提取資料夾名稱的前綴 將資料夾重新命名為 chXX 格式 自動整理章節順序 使用方式:\npython move-ch-folder.py 3. move-walk-through_GUI.py 功能: 提供圖形化界面的文件移動工具\n支援選擇來源和目標資料夾 基於文件名前綴進行智能匹配 提供友好的用戶界面 使用方式:\npython move-walk-through_GUI.py 版本歷史 00_version/v1_move-walk-through.py 早期版本的文件移動工具，支援命令行參數和 GUI 模式。\n00_version/v2_GUI.py 改進的 GUI 版本，提供更好的用戶體驗。\n安裝需求 Python 3.6 或更高版本 tkinter (通常隨 Python 一起安裝) 使用說明 1. 基本文件整理 如果您有一堆文件需要按名稱整理到資料夾中：\n# 修改 move-same-name-into-folder.py 中的路徑 base_path = r\u0026amp;#34;您的文件路徑\u0026amp;#34; 2. 章節資料夾整理 如果您有章節資料夾需要重新命名：\n# 修改 move-ch-folder.py 中的路徑 base_dir = r\u0026amp;#34;您的資料夾路徑\u0026amp;#34; 3. GUI 模式 使用圖形化界面進行文件整理：\n運行 move-walk-through_GUI.py 選擇來源資料夾 選擇目標資料夾 點擊 \u0026amp;ldquo;Move Files\u0026amp;rdquo; 按鈕 工作 …","date":1759881600,"dir":"post\\code\\python\\00_video\\move-same-name-into-folder\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"b006ed401f65298972594249dda6c7e1","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/move-same-name-into-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/move-same-name-into-folder/","section":"post","tags":["video"],"title":"move-same-name-into-folder","type":"post","url":"/post/code/python/00_video/move-same-name-into-folder/","weight":0,"wordcount":910},{"author":null,"categories":null,"content":"移動相同前綴資料夾工具 這是一個用於自動移動具有相同前綴的資料夾內容的 Python 應用程式。該工具可以根據資料夾名稱的前綴（下劃線前的部分）來匹配源目錄和目標目錄中的資料夾，並將源資料夾中的文件移動到匹配的目標資料夾中。\n功能特點 🔄 自動匹配具有相同前綴的資料夾 📁 批量移動文件到對應的目標資料夾 🗑️ 自動清理空的源資料夾 🖥️ 提供圖形化用戶界面（GUI） 📝 詳細的操作日誌輸出 文件結構 app/\r├── app.py # 命令行版本\r├── gui.py # 圖形化界面版本\r└── README.md # 說明文件 安裝要求 Python 3.6 或更高版本 tkinter（通常隨 Python 一起安裝） 使用方法 方法一：圖形化界面（推薦） 運行圖形化界面版本：\npython gui.py 在界面中：\n點擊 \u0026amp;ldquo;Select Source\u0026amp;rdquo; 選擇源目錄 點擊 \u0026amp;ldquo;Select Destination\u0026amp;rdquo; 選擇目標目錄 點擊 \u0026amp;ldquo;Move Folders\u0026amp;rdquo; 開始移動操作 方法二：命令行版本 編輯 app.py 文件中的路徑：\nsource_directory = r\u0026amp;#34;你的源目錄路徑\u0026amp;#34; destination_directory = r\u0026amp;#34;你的目標目錄路徑\u0026amp;#34; 運行程序：\npython app.py 工作原理 前綴提取：從源目錄中的每個資料夾名稱提取前綴（下劃線前的部分） 匹配查找：在目標目錄中查找以相同前綴開頭的資料夾 文件移動：將源資料夾中的所有文件移動到匹配的目標資料夾 清理：移動完成後刪除空的源資料夾 範例 假設有以下目錄結構：\n源目錄：\nsource/\r├── 001_資料夾A/\r│ ├── 文件1.txt\r│ └── 文件2.txt\r└── 002_資料夾B/\r└── 文件3.txt 目標目錄：\ndestination/\r├── 001_目標資料夾A/\r└── 002_目標資料夾B/ 執行後：\ndestination/\r├── 001_目標資料夾A/\r│ ├── 文件1.txt\r│ └── 文件2.txt\r└── 002_目標資料夾B/\r└── 文件3.txt 注意事項 ⚠️ 請確保在執行前備份重要文件 📂 源目錄和目標目錄必須存在且可訪問 🔍 程序 …","date":1759881600,"dir":"post\\code\\python\\00_video\\move-same-prefix-folder\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"72faadc53be8d2b6e17a8732c538ea1e","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/move-same-prefix-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/move-same-prefix-folder/","section":"post","tags":["video"],"title":"move-same-prefix-folder","type":"post","url":"/post/code/python/00_video/move-same-prefix-folder/","weight":0,"wordcount":854},{"author":null,"categories":null,"content":"視頻文件重命名工具 這是一個用於自動重命名視頻文件和字幕文件的 Python 工具，特別適用於處理 Lynda 課程文件。\n功能特點 自動重命名 MP4 文件：將複雜的文件名格式轉換為簡潔的格式 自動重命名 SRT 字幕文件：提取並標準化字幕文件名 統一命名規則：確保視頻文件和字幕文件使用相同的命名格式 零填充：自動為數字前綴添加零填充（例如：1.1 → 01.01） 文件結構 app/\r├── app.py # 主程序文件\r├── run.bat # Windows 批處理執行文件\r└── README.md # 說明文檔 使用方法 方法一：使用批處理文件（推薦） 將 run.bat 和 app.py 複製到包含需要重命名的視頻文件的目錄 雙擊運行 run.bat 方法二：使用命令行 python app.py \u0026amp;lt;目標文件夾路徑\u0026amp;gt; 例如：\npython app.py \u0026amp;#34;C:\\Users\\YourName\\Videos\\Course\u0026amp;#34; 重命名規則 MP4 文件重命名 原始格式：數字_0數字.0數字_描述_標題.mp4 新格式：數字.數字_標題.mp4 零填充：數字會自動添加前導零（例如：1.1 → 01.01） SRT 字幕文件重命名 原始格式：任意前綴_數字.數字_描述.srt 新格式：數字.數字_描述.srt 零填充：數字會自動添加前導零 統一命名 程序會確保 MP4 文件和對應的 SRT 文件使用相同的文件名（除了擴展名） 示例 重命名前： 123_01.02_Introduction_to_Python_Basics.mp4\r456_01.02_Introduction_to_Python_Basics.srt\r789_02.01_Variables_and_Data_Types.mp4\r101_02.01_Variables_and_Data_Types.srt 重命名後： 01.02_Introduction_to_Python_Basics.mp4\r01.02_Introduction_to_Python_Basics.srt\r02.01_Variables_and_Data_Types.mp4\r02.01_Variables_and_Data_Types.srt 系統要求 Python 3.x Windows 操作系統（批 …","date":1759881600,"dir":"post\\code\\python\\00_video\\old-lynda-srt-samename-flow\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"50734cc2371dfb1f0d56dae57564feb5","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/old-lynda-srt-samename-flow/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/old-lynda-srt-samename-flow/","section":"post","tags":["video"],"title":"old-lynda-srt-samename-flow","type":"post","url":"/post/code/python/00_video/old-lynda-srt-samename-flow/","weight":0,"wordcount":679},{"author":null,"categories":null,"content":"OneNote 影片目錄轉 URL 工具 這是一個 Python 工具，用於將 OneNote 影片目錄（Markdown 格式）轉換為資料夾結構和 URL 檔案，方便下載和管理影片資源。\n功能特色 📁 自動創建資料夾結構 🔗 生成 .url 檔案，快速訪問影片連結 🧹 自動清理不合法的資料夾名稱 📝 支援 Markdown 格式的目錄檔案 🎯 專門針對考試影片資源優化 系統需求 Python 3.6 或更高版本 Windows 作業系統（支援 .url 檔案） 安裝與使用 方法一：使用批次檔（推薦） 將您的 Markdown 目錄檔案放在專案目錄中 執行批次檔： go.bat your_toc_file.md 方法二：直接使用 Python 開啟命令提示字元或 PowerShell 執行以下命令： python app.py your_toc_file.md 支援的目錄格式 工具支援以下 Markdown 格式：\n有 URL 連結的格式 - [113年度](https://example.com/video1) - [112年度](https://example.com/video2) 純文字格式 - 113年度影片 - 112年度影片 行號格式（自動處理） 1||- [113年度](https://example.com/video1) 2||- [112年度](https://example.com/video2) 輸出結果 執行後會在 output 資料夾中生成：\noutput/\r├── 113年度/\r│ └── 113年度.url\r├── 112年度/\r│ └── 112年度.url\r└── 111年度/\r└── 111年度.url 內建範例檔案 專案包含以下範例目錄檔案：\ntoc_postoffice.md - 郵局考試影片目錄 toc_twport.md - 台灣港務公司考試影片目錄 toc-mrt.md - 台北捷運考試影片目錄 memo.md - 備忘錄和筆記 使用範例 處理郵局考試影片目錄 python app.py toc_postoffice.md 處理港務公司考試影片目錄 python app.py toc_twport.md 處理捷運考試影片目錄 python app.py toc-mrt.md 資料夾名稱清理規則 工具會自動清理資料夾名 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\exam-date-to-download-Q@@flow\\onenote-video-toc-to-url\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"f73d246bb38e8214f3083bccffa79245","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/exam-date-to-download-q@@flow/onenote-video-toc-to-url/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/exam-date-to-download-q@@flow/onenote-video-toc-to-url/","section":"post","tags":["exam---"],"title":"onenote-video-toc-to-url","type":"post","url":"/post/code/python/00_exam---/exam-date-to-download-q@@flow/onenote-video-toc-to-url/","weight":0,"wordcount":899},{"author":null,"categories":null,"content":"PBF 到 LNK 轉換器 這是一個Python應用程序，用於處理視頻時間文件（.pbf格式）並自動創建視頻播放器的快捷方式，讓您可以快速跳轉到視頻的特定時間點。\n功能特點 解析 .pbf 格式的視頻時間文件 自動創建視頻播放器快捷方式（.lnk文件） 支持自定義視頻播放器路徑 自動在輸入文件同目錄創建 output 文件夾 支持命令行參數和批次檔執行 項目結構 app/\r├── assets/ # 示例 .pbf 文件\r│ ├── migii-toeic-exam-1.pbf\r│ ├── videoTime-backup.pbf\r│ └── videoTime.pbf\r├── lib/ # 核心功能模組\r│ ├── shortcut_creator.py # 快捷方式創建器\r│ └── video_processor.py # 視頻時間文件處理器\r├── little/ # 輔助工具\r│ ├── little.py\r│ ├── timeTolnk.py\r│ └── video-time-pic.py\r├── main.py # 主程序（固定路徑版本）\r├── main2.py # 主程序（命令行參數版本）\r├── test_video_processor.py # 測試文件\r└── gooo.bat # 批次執行檔 安裝要求 Python 依賴 Python 3.6+ pywin32 - 用於創建Windows快捷方式 安裝依賴 pip install pywin32 使用方法 方法一：使用命令行參數（推薦） python main2.py \u0026amp;#34;路徑/到/你的/文件.pbf\u0026amp;#34; --video_exe_path \u0026amp;#34;C:\\Program Files\\DAUM\\PotPlayer\\PotPlayerMini64.exe\u0026amp;#34; 方法二：使用批次檔 編輯 gooo.bat 文件，修改其中的文件路徑 雙擊執行批次檔 方法三：修改 main.py 編輯 main.py 文件 修改 input_file 變數為你的 .pbf 文件路徑 修改 exe_path 變數為你的視頻播放器路徑 執行：python main.py 輸入文件格式 .pbf 文件格式示例：\n[Bookmark]\r0=34628*1_認識記憶*[二進制數據]\r1=37631*_1.1_記 …","date":1759881600,"dir":"post\\code\\python\\00_video\\pbf-to-lnk\\","expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"f33eb3adaf5e0d7a42c041f0a943f7ce","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/pbf-to-lnk/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_video/pbf-to-lnk/","section":"post","tags":["video"],"title":"pbf-to-lnk","type":"post","url":"/post/code/python/00_video/pbf-to-lnk/","weight":0,"wordcount":1203},{"author":null,"categories":null,"content":"郵局連結群組管理工具 (Post Office Link Group Manager) 這是一個用於管理和組織 Windows 捷徑檔案的 Python 工具，特別適用於整理考試資料、學習資源和各種文件連結。\n功能特色 🔗 自動建立捷徑: 從路徑清單自動建立 Windows .lnk 捷徑檔案 📁 智能分類: 自動為每個捷徑建立編號前綴和對應資料夾 📊 HTML 報表: 生成包含所有連結的 HTML 表格報表 🗂️ 多種輸出格式: 支援不同主題和分類的輸出目錄 📝 詳細日誌: 完整的錯誤記錄和處理狀態追蹤 專案結構 app/\r├── app.py # 主要程式檔案\r├── path.txt # 路徑清單檔案\r├── requirements.txt # Python 依賴套件\r├── alllnk/ # 原始連結檔案\r├── output/ # 預設輸出目錄\r├── output-chinese/ # 中文內容輸出\r├── output-network/ # 網路相關輸出\r├── output-post/ # 郵局相關輸出\r├── output-postoffice/ # 郵局考試輸出\r├── output-program-normal/ # 程式設計一般輸出\r├── output-taipower/ # 台電相關輸出\r├── output-ttt/ # TTT 相關輸出\r├── output-twport/ # 台灣港務輸出\r├── output-v1/ # 版本 1 輸出\r└── 00_version/ # 版本歷史檔案 安裝需求 系統需求 Windows 作業系統 Python 3.6 或更高版本 依賴套件 pip install -r requirements.txt 主要依賴：\npywin32==306 - Windows COM 物件支援 使用方法 1. 準備路徑清單 在 path.txt 檔案中輸入要建立捷徑的檔案或資料夾路徑，每行一個路徑：\nD:\\path\\to\\file1.txt\rD:\\path\\to\\folder1\rD:\\path\\to\\file2.pdf 2. 執行程式 python app.py 3. 查看結果 程式執行完成後，會在 output 目錄中生成：\n編號資料夾（01_、02_、03_\u0026amp;hellip;） …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\post-office-lnk-group\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"bdb60e5ac125df38fea62639ad46e75a","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/post-office-lnk-group/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/post-office-lnk-group/","section":"post","tags":["exam---"],"title":"post-office-lnk-group","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/post-office-lnk-group/","weight":0,"wordcount":1043},{"author":null,"categories":null,"content":"PlantUML 轉 JPG 轉換器 這個 Python 腳本可以將 target 資料夾中的所有 PlantUML (.puml) 檔案轉換為 JPG 圖片格式。\n安裝依賴 首先安裝必要的 Python 套件：\npip install -r requirements.txt 或者手動安裝：\npip install plantuml==0.3.0 Pillow==10.0.0 使用方法 確保您的 PlantUML 檔案都放在 target 資料夾中 執行腳本： python app.py 功能特點 🔍 自動掃描 target 資料夾中的所有 .puml 檔案 🖼️ 將 PlantUML 圖表轉換為高品質 JPG 圖片 📁 自動創建 output 資料夾存放轉換後的圖片 🎨 處理透明背景，轉換為白色背景 📊 顯示轉換進度和結果統計 輸出 轉換後的 JPG 檔案將保存在 output 資料夾中，檔案名稱與原始 .puml 檔案相同，但副檔名為 .jpg。\n注意事項 需要網路連線來使用 PlantUML 線上服務 如果轉換失敗，會顯示錯誤訊息 支援所有 PlantUML 圖表類型（活動圖、類別圖、元件圖、資料庫 ER 圖、序列圖等） ","date":1759881600,"dir":"post\\code\\python\\00_code\\puml-to-jpg\\","expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":["code"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"b0d00adedc25c810a589cbc666fcac8a","permalink":"https://wikihuangblog.github.io/post/code/python/00_code/puml-to-jpg/","publishdate":"2025-10-08T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_code/puml-to-jpg/","section":"post","tags":["code"],"title":"puml-to-jpg","type":"post","url":"/post/code/python/00_code/puml-to-jpg/","weight":0,"wordcount":277},{"author":null,"categories":null,"content":"專案記錄工具 (Record What Recent Care Project) 這是一個用於記錄最近關注專案資料夾的 Python 工具，可以自動建立捷徑檔案並按月份組織，方便追蹤最近的工作進度。\n功能特色 📁 記錄最近關注的專案資料夾路徑 📅 按日期時間自動分類到對應月份資料夾 🔗 自動建立 Windows 捷徑檔案 (.lnk) 📝 將記錄保存到 Markdown 檔案中 🗂️ 自動建立年/月資料夾結構 專案結構 app/\r├── app.py # 主要 Python 程式\r├── go.bat # 批次執行檔案\r├── project_records.md # 專案記錄檔案\r├── issue.markdown # 專案說明文件\r├── output/ # 輸出資料夾\r│ └── 2025/\r│ ├── 02/ # 按月份分類的捷徑檔案\r│ ├── 03/\r│ └── 05/\r└── pic/ # 專案截圖 安裝需求 系統需求 Windows 作業系統 Python 3.x Python 套件 pip install pywin32 使用方法 方法一：透過 SendTo 功能（推薦） 將 go.bat 檔案複製到 Windows SendTo 資料夾：\n按 Win + R，輸入 shell:sendto 將 go.bat 複製到該資料夾 使用方式：\n在檔案總管中右鍵點擊任何資料夾 選擇「傳送到」→「go.bat」 系統會自動記錄該資料夾路徑並建立捷徑 方法二：直接執行 # 在命令提示字元中執行 go.bat \u0026amp;#34;C:\\path\\to\\your\\project\\folder\u0026amp;#34; 方法三：直接執行 Python 程式 python app.py \u0026amp;#34;C:\\path\\to\\your\\project\\folder\u0026amp;#34; 輸出結果 記錄檔案 (project_records.md) - 2025/02/21 09:40 - E:\\codeAll\\python\\00_exam---\\txt-to-multi-column-pic\r- 2025/02/21 09:44 - E:\\codeAll\\python\\00_target\\find-memo-path-as-lnk-file-keep-folder-structure\r- 2025/02/22 …","date":1759881600,"dir":"post\\code\\python\\00_search\\record-what-recent-care-project\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"6086bfa8642df9c8aefffe71d8bc2059","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/record-what-recent-care-project/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_search/record-what-recent-care-project/","section":"post","tags":["search"],"title":"record-what-recent-care-project","type":"post","url":"/post/code/python/00_search/record-what-recent-care-project/","weight":0,"wordcount":777},{"author":null,"categories":null,"content":"參考資料搜索工具 (Reference Search Tool) 這是一個基於 FileLocator Pro 的自動化搜索工具，用於根據資料夾名稱中的關鍵字搜索相關的參考資料。\n功能說明 自動從當前資料夾路徑中提取關鍵字 支援多關鍵字搜索（以分號分隔） 使用 FileLocator Pro 進行高效的文件搜索 生成 HTML 格式的搜索結果報告 項目結構 app/\r├── app.py # 主程序（最新版本）\r├── app-v1.py # 早期版本\r├── go.bat # 批處理啟動腳本\r├── 00_ref/\r│ └── filelocator-serch-template.py # FileLocator 使用範例\r├── pic/\r│ └── image-20250328070554364.png # 項目說明圖片\r├── issue.markdown # 項目說明文檔\r└── README.md # 本說明文檔 使用方法 1. 環境需求 Python 3.x FileLocator Pro（需安裝在預設路徑） Windows 作業系統 2. 快速開始 將此工具放置在您的參考資料資料夾中 雙擊執行 go.bat 或在命令列中執行： go.bat 3. 資料夾命名規則 工具會自動從資料夾路徑中提取搜索關鍵字：\n格式: Q[數字]_[關鍵字1];[關鍵字2] 範例: Q01_Digitization;AI → 搜索關鍵字：Digitization 和 AI 範例: Q03_SDLC → 搜索關鍵字：SDLC 4. 搜索配置 在 app.py 中可以修改以下設定：\n# FileLocator Pro 安裝路徑 filelocator_path = r\u0026amp;#34;C:\\Program Files\\Mythicsoft\\FileLocator Pro\\FileLocatorPro.exe\u0026amp;#34; # 搜索目錄 search_dir = \u0026amp;#34;E:\\\\00_bookstore\\\\airitibooks\\\\download-ok\u0026amp;#34; # 搜索文件類型 file_pattern = \u0026amp;#34;*.md;*.markdown;*.txt;\u0026amp;#34; 工作原理 路徑解析: 從命令行參數獲取當前資料夾路徑 關鍵字提取: 從父資料夾名稱中提取關鍵字 正則表達式生成:  …","date":1759881600,"dir":"post\\code\\python\\00_search\\ref-search-Q-keyword-result\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["search"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"7e395f2e1e1aa1329d2e2eecc314f07e","permalink":"https://wikihuangblog.github.io/post/code/python/00_search/ref-search-q-keyword-result/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_search/ref-search-q-keyword-result/","section":"post","tags":["search"],"title":"ref-search-Q-keyword-result","type":"post","url":"/post/code/python/00_search/ref-search-q-keyword-result/","weight":0,"wordcount":765},{"author":null,"categories":null,"content":"資料夾重命名工具 這是一個用於根據關鍵字和章節資訊自動重新命名資料夾的 Python 應用程式。主要功能是將數字編號的資料夾重新命名為更具描述性的格式，並按照課程類別進行分類整理。\n功能特色 📁 自動讀取 Markdown 格式的章節資訊表 🔄 根據關鍵字和課程類別重新命名資料夾 📊 支援多種資料格式（CSV、Markdown 表格） 🗂️ 自動創建分類資料夾並整理內容 ✅ 包含完整的單元測試 專案結構 app/\r├── app.py # 主要應用程式\r├── test_app.py # 單元測試\r├── bookChapterGroup.md # 章節資訊表（Markdown 格式）\r├── keyword.txt # 關鍵字資料（CSV 格式）\r├── keyword-new.txt # 新版關鍵字資料\r├── go.bat # Windows 批次執行檔\r├── issue.jpg # 問題截圖\r├── issue.markdown # 問題說明文件\r└── README.md # 專案說明文件 安裝需求 Python 套件 pip install pandas 系統需求 Python 3.6 或更高版本 Windows/Linux/macOS 使用方法 1. 準備資料檔案 章節資訊表 (bookChapterGroup.md) Markdown 格式的表格，包含以下欄位：\n序號：題目編號 章節編號：如 Ch05、Ch03-4 等 課程類別：如 機率論、統計學基礎 等 關鍵字：題目相關的關鍵字 關鍵字檔案 (keyword.txt) Tab 分隔的 CSV 檔案，包含：\n题号：題目編號 分类：題目分類 关键字：題目關鍵字 2. 執行應用程式 方法一：使用 Python 直接執行 python app.py \u0026amp;#34;路徑/到/bookChapterGroup.md\u0026amp;#34; 方法二：使用批次檔 (Windows) go.bat 3. 執行測試 python test_app.py 重命名規則 應用程式會將數字編號的資料夾重新命名為以下格式：\n原始格式：\nchapter/\r├── 1/\r├── 2/\r└── 3/ 重命名後：\nchapter/\r├── Ch05機率論/\r│ ├── 01_組合、抽樣、無放回抽樣/\r│ └── 02_條件機率、撲克牌、無放回抽樣/ …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\000_move-prefix\\rename-folder-by-keyword-with-prefix-number\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"7eb840bb21bca67fd8aecc394f9c6e33","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/000_move-prefix/rename-folder-by-keyword-with-prefix-number/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/000_move-prefix/rename-folder-by-keyword-with-prefix-number/","section":"post","tags":["exam---"],"title":"rename-folder-by-keyword-with-prefix-number","type":"post","url":"/post/code/python/00_exam---/000_move-prefix/rename-folder-by-keyword-with-prefix-number/","weight":0,"wordcount":1067},{"author":null,"categories":null,"content":"MSG 檔案重新命名工具 這是一個用於自動重新命名 Outlook .msg 檔案的 Python 工具，根據郵件的發送日期來為檔案添加日期前綴。\n功能特色 🔍 自動從 .msg 檔案中提取發送日期 📅 使用 YYYYMMDD_HHMMSS 格式作為檔案名稱前綴 🔄 避免重複處理已重新命名的檔案 🛡️ 處理檔案名稱衝突（自動添加序號） 📁 批次處理整個資料夾中的所有 .msg 檔案 系統需求 Windows 作業系統 Microsoft Outlook 已安裝 Python 3.6 或更高版本 安裝步驟 克隆或下載此專案到您的電腦 安裝必要的依賴套件： pip install -r requirements.txt 使用方法 修改 app.py 中的 folder_path 變數，指向包含 .msg 檔案的資料夾： folder_path = r\u0026amp;#34;D:\\your\\path\\to\\msg\\files\u0026amp;#34; 執行程式： python app.py 檔案命名規則 程式會將檔案重新命名為以下格式：\nYYYYMMDD_HHMMSS_原始檔名.msg 例如：\n原始檔案：重要郵件.msg 重新命名後：20231215_143022_重要郵件.msg 如果檔案名稱已存在，程式會自動添加序號：\n20231215_143022_重要郵件_1.msg 20231215_143022_重要郵件_2.msg 注意事項 ⚠️ 程式會直接修改檔案名稱，建議先備份重要檔案 🔒 需要 Microsoft Outlook 來讀取 .msg 檔案的內容 📝 已重新命名的檔案（具有日期前綴格式）會被自動跳過 🚫 如果無法讀取檔案的發送日期，該檔案會被跳過 錯誤處理 程式包含完整的錯誤處理機制：\n資料夾不存在時會顯示錯誤訊息 無法讀取 .msg 檔案時會跳過該檔案 檔案重新命名失敗時會顯示錯誤訊息 依賴套件 pywin32==306 - 用於與 Windows COM 物件互動 授權 此專案僅供個人使用。\n支援 如果您遇到任何問題或有改進建議，請聯繫開發者。\n","date":1759881600,"dir":"post\\code\\python\\00_mail\\rename-msg-by-date\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["mail"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"4a5519247e6e041bca6fceb3c01e800a","permalink":"https://wikihuangblog.github.io/post/code/python/00_mail/rename-msg-by-date/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_mail/rename-msg-by-date/","section":"post","tags":["mail"],"title":"rename-msg-by-date","type":"post","url":"/post/code/python/00_mail/rename-msg-by-date/","weight":0,"wordcount":585},{"author":null,"categories":null,"content":"文件夾重命名工具 這是一個 Python 工具，用於根據目錄中的 .aiqa.html 文件自動重命名其父文件夾。\n功能描述 該工具會掃描指定目錄及其子目錄，尋找以 .aiqa.html 結尾的文件，然後使用該文件的名稱（去掉 .aiqa 後綴）來重命名其所在的父文件夾。\n文件結構 app/\r├── app.py # 主要腳本文件\r├── logVersion.py # 帶有日誌記錄和錯誤處理的增強版本\r├── go.bat # Windows 批處理文件，用於快速執行\r├── document.md # 代碼說明文檔\r└── README.md # 本文件 使用方法 方法一：直接運行 Python 腳本 # 使用當前目錄 python app.py # 指定目錄 python app.py /path/to/directory 方法二：使用增強版本（推薦） # 使用增強版本，包含日誌記錄和錯誤處理 python logVersion.py /path/to/directory 方法三：使用 Windows 批處理文件 在 Windows 系統上，您可以雙擊 go.bat 文件，它會自動使用當前目錄作為參數運行腳本。\n工作原理 工具會遞歸掃描指定目錄及其所有子目錄 尋找以 .aiqa.html 結尾的文件 提取文件名（去掉 .aiqa.html 後綴） 將該文件所在的父文件夾重命名為提取的文件名 記錄操作結果 示例 假設您有以下目錄結構：\nproject/\r├── folder1/\r│ └── document.aiqa.html\r├── folder2/\r│ └── report.aiqa.html\r└── folder3/\r└── notes.aiqa.html 運行工具後，目錄結構將變為：\nproject/\r├── document/\r│ └── document.aiqa.html\r├── report/\r│ └── report.aiqa.html\r└── notes/\r└── notes.aiqa.html 安全特性 重複檢查：如果目標文件夾名稱已存在，工具會跳過重命名操作 錯誤處理：包含完整的異常處理機制 日誌記錄：所有操作都會記錄到 folder_rename.log 文件中 詳細輸出：在控制台顯示操作結果 系統要求 Python 3.x …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\rename-parent-as-child-aiqa\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"8293a22c6b540c7a6c3ba49d5f410c91","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/rename-parent-as-child-aiqa/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/rename-parent-as-child-aiqa/","section":"post","tags":["exam---"],"title":"rename-parent-as-child-aiqa","type":"post","url":"/post/code/python/00_exam---/rename-parent-as-child-aiqa/","weight":0,"wordcount":673},{"author":null,"categories":null,"content":"HTML 鏈接批量處理工具 這是一個用於批量處理 HTML 文件並自動打開其中鏈接的 Python 工具。\n功能描述 此工具會：\n掃描指定資料夾中的所有 HTML 文件 從每個 HTML 文件中提取第一個符合條件的鏈接（li.classroom-toc-item \u0026amp;gt; a） 自動在瀏覽器中打開這些鏈接 根據資料夾名稱計算延遲時間 處理完成後將 HTML 文件移動到完成資料夾 系統需求 Python 3.6+ 以下 Python 套件： beautifulsoup4 lxml (可選，用於更快的 HTML 解析) 安裝依賴 pip install beautifulsoup4 lxml 使用方法 方法一：使用 Python 腳本 python app.py \u0026amp;lt;目標資料夾路徑\u0026amp;gt; 方法二：使用批次檔 編輯 go.bat 文件，修改 target_folder 變數為您的目標資料夾路徑 雙擊執行 go.bat 參數說明 target_folder: 包含 HTML 文件的目標資料夾路徑 工作原理 鏈接提取: 從每個 HTML 文件中查找 li.classroom-toc-item \u0026amp;gt; a 選擇器對應的鏈接 URL 處理: 提取鏈接的基礎 URL（去除文件名部分） 延遲計算: 根據資料夾名稱中的數字範圍計算延遲時間 例如：資料夾名為 0-9，則延遲時間 = 4秒 × 5 + 5秒 = 25秒 自動執行: 按順序打開每個鏈接，等待指定時間後移動文件到完成資料夾 資料夾結構 目標資料夾/\r├── file1.html\r├── file2.html\r└── ... 處理後：\n目標資料夾/\r├── 00_finish_folder/\r│ ├── file1.html\r│ ├── file2.html\r│ └── ... 延遲時間計算 基礎延遲：每個鏈接 4 秒 額外延遲：根據資料夾名稱中的數字範圍中點計算 總延遲 = 基礎延遲 × 中點值 + 5秒 例如：\n資料夾名 0-9：中點 = 5，延遲 = 4 × 5 + 5 = 25秒 資料夾名 10-20：中點 = 15，延遲 = 4 × 15 + 5 = 65秒 輸出信息 程序會顯示：\n預計總執行時間 當前時間 預計完成時間 每個鏈接的處理狀態 注意事項 確保目標資料夾中包含有效的 HTML 文件 HTML 文件必 …","date":1759881600,"dir":"post\\code\\python\\00_manual\\run-all-href-by-html-in-folder\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["manual"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"4731cb018a863d31cc7521a73a12ecff","permalink":"https://wikihuangblog.github.io/post/code/python/00_manual/run-all-href-by-html-in-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_manual/run-all-href-by-html-in-folder/","section":"post","tags":["manual"],"title":"run-all-href-by-html-in-folder","type":"post","url":"/post/code/python/00_manual/run-all-href-by-html-in-folder/","weight":0,"wordcount":808},{"author":null,"categories":null,"content":"批量文件處理工具 這是一個用於批量處理文件的 Python 應用程序，主要功能包括處理 HTML 文件和 .lnk 快捷方式文件。\n功能特色 1. HTML 文件處理器 (app.py) 自動掃描指定資料夾中的 HTML 文件 從 HTML 文件中提取 URL 鏈接 按順序打開每個 URL（使用瀏覽器） 處理完成後自動移動文件到完成資料夾 智能延遲計算，基於資料夾名稱中的數字範圍 顯示預估完成時間 2. LNK 文件處理器 (v1_app-open-by-lnk.py) 掃描指定資料夾中的 .lnk 快捷方式文件 自動打開每個快捷方式指向的應用程序 記錄處理日誌 處理完成後移動文件到完成資料夾 支援多層級目錄掃描 系統需求 Python 3.6+ Windows 作業系統（使用 win32com 模組） 以下 Python 套件： beautifulsoup4 pywin32 安裝依賴 pip install beautifulsoup4 pywin32 使用方法 HTML 文件處理 python app.py \u0026amp;lt;目標資料夾路徑\u0026amp;gt; 範例：\npython app.py \u0026amp;#34;C:\\Users\\YourName\\Documents\\html_files\u0026amp;#34; 功能說明：\n程式會掃描指定資料夾中的所有 HTML 文件 從每個 HTML 文件中提取第一個符合條件的 URL 根據資料夾名稱中的數字範圍計算延遲時間 依序打開每個 URL，並在處理完成後移動文件 LNK 文件處理 python v1_app-open-by-lnk.py \u0026amp;lt;目標資料夾路徑\u0026amp;gt; 範例：\npython v1_app-open-by-lnk.py \u0026amp;#34;C:\\Users\\YourName\\Desktop\\shortcuts\u0026amp;#34; 功能說明：\n掃描指定資料夾中的 .lnk 快捷方式文件 自動打開每個快捷方式 記錄處理日誌到 lnk_files_log.txt 處理完成後移動文件到 00_finish_folder 子資料夾 資料夾結構 程式會自動創建以下資料夾結構：\n目標資料夾/\r├── 原始文件...\r├── 00_finish_folder/ # 處理完成的文件會移動到這裡\r│ ├── processed_file1.html\r│ ├── …","date":1759881600,"dir":"post\\code\\python\\00_video\\run-all-lnk-in-folder\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["video"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"911f61bb9fd4be98dbd3e37d950615c8","permalink":"https://wikihuangblog.github.io/post/code/python/00_video/run-all-lnk-in-folder/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_video/run-all-lnk-in-folder/","section":"post","tags":["video"],"title":"run-all-lnk-in-folder","type":"post","url":"/post/code/python/00_video/run-all-lnk-in-folder/","weight":0,"wordcount":841},{"author":null,"categories":null,"content":"Shopee 自動評價腳本 這是一個用於 Shopee 購物平台的 Tampermonkey 自動評價腳本，可以自動完成商品評價、評論填寫、照片和影片上傳等功能。\n功能特色 ⭐ 自動五星評價：一鍵點擊五星評分 💬 智能評論填寫：自動填入預設的正面評論 📸 照片上傳：自動觸發照片上傳功能 🎥 影片上傳：自動觸發影片上傳功能 🔄 批量處理：支援多個商品的批量評價 ⌨️ 快捷鍵操作：使用 F6-F10 快捷鍵進行操作 安裝說明 前置需求 安裝 Tampermonkey 瀏覽器擴展 支援的瀏覽器：Chrome、Firefox、Edge、Safari 安裝步驟 複製 app.js 中的完整代碼 打開 Tampermonkey 管理面板 點擊「新增腳本」 貼上代碼並儲存 前往 Shopee 評價頁面 使用說明 快捷鍵功能 F6：點擊五星評價 F7：填寫評論 F8：觸發照片上傳 F9：觸發影片上傳 F10：移動到下一個商品 操作流程 前往 Shopee 的「待評價」頁面 點擊要評價的商品 使用快捷鍵依序完成： 按 F6 進行五星評價 按 F7 填寫評論 按 F8 上傳照片（可選） 按 F9 上傳影片（可選） 按 F10 切換到下一個商品 預設評論內容 腳本包含 5 種不同的正面評論模板，會隨機選擇使用：\n\u0026amp;ldquo;商品品質很好，包裝完整,出貨速度快，賣家服務態度很好！\u0026amp;hellip;\u0026amp;rdquo; \u0026amp;ldquo;非常滿意這次的購物體驗，商品和描述的一樣，值得推薦！\u0026amp;hellip;\u0026amp;rdquo; \u0026amp;ldquo;商品收到了，品質不錯，賣家出貨速度快，包裝也很完整，很滿意！\u0026amp;hellip;\u0026amp;rdquo; \u0026amp;ldquo;很棒的賣家，出貨速度快，商品品質優良，會再回購的！\u0026amp;hellip;\u0026amp;rdquo; \u0026amp;ldquo;商品品質超乎預期，賣家服務很好，出貨速度快，五星好評！\u0026amp;hellip;\u0026amp;rdquo; 版本歷史 當前版本 (v99_current.js) 分離式操作：每個功能獨立按鍵控制 改進的焦點管理 更好的錯誤處理 版本演進 v1-v3：基礎功能開發 v4-v5：評論功能完善 v6.0-v6.2：影片上傳功能開發 v7.0-v7.1：分離式操作實現 技術細節 主要功能模組 initializeRatingContainers()：初始化評價容器 handleRating()：處理五星 …","date":1759881600,"dir":"post\\code\\python\\00_money\\shopee-auto-comment\\","expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":["money"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"5cd2b5d5358f40924e4a7dc2455db365","permalink":"https://wikihuangblog.github.io/post/code/python/00_money/shopee-auto-comment/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_money/shopee-auto-comment/","section":"post","tags":["money"],"title":"shopee-auto-comment","type":"post","url":"/post/code/python/00_money/shopee-auto-comment/","weight":0,"wordcount":1380},{"author":null,"categories":null,"content":"Simility Name Move 一個基於文件名相似度的智能文件移動工具，用於自動整理和組織 HTML 文件。\n功能概述 這個項目包含兩個主要的 Python 腳本，用於根據文件名相似度自動移動 HTML 文件到相應的目標文件夾：\napp.py - 基於文件夾名稱匹配的移動工具 simility-move.py - 基於 Levenshtein 距離算法的智能相似度匹配工具 文件說明 app.py 功能: 將 HTML 文件移動到名稱以 _{basename} 結尾的目標文件夾 特點: 簡單直接的匹配方式，適合有明確命名規則的文件夾結構 使用場景: 當目標文件夾有固定的命名格式時 simility-move.py 功能: 使用 Levenshtein 距離算法計算文件名與文件夾名的相似度 特點: 智能匹配，相似度閾值為 0.92 使用場景: 當需要更靈活的匹配，或文件名與文件夾名不完全一致時 安裝依賴 pip install python-Levenshtein 使用方法 方法一：使用 app.py 修改腳本中的路徑變量：\nori_html_folder = r\u0026amp;#39;你的原始HTML文件夾路徑\u0026amp;#39; target_base_path = r\u0026amp;#39;你的目標基礎路徑\u0026amp;#39; 運行腳本：\npython app.py 方法二：使用 simility-move.py 修改腳本中的路徑變量：\ntarget_folder = r\u0026amp;#39;你的目標文件夾路徑\u0026amp;#39; ori_html_folder = r\u0026amp;#39;你的原始HTML文件夾路徑\u0026amp;#39; 運行腳本：\npython simility-move.py 核心功能 字符串處理 自動移除文件名中的數字 去除前導空格 提取文件基本名稱 相似度計算 使用 Levenshtein 距離算法 可調整的相似度閾值 智能匹配最佳目標文件夾 文件操作 安全的文件移動操作 重複文件檢測 錯誤處理和日誌記錄 注意事項 備份重要文件: 在運行腳本前，建議備份重要的 HTML 文件 路徑設置: 確保所有路徑變量設置正確 權限檢查: 確保腳本有足夠的權限讀取和移動文件 相似度閾值: 可以根據需要調整 max_similarity 值 錯誤處理 腳本包含完善的錯誤處理機制：\n文件已存在時會跳過移動 移動失敗時會顯示錯誤信息 找不到匹配 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\simility-name-move\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"303036e1e62f20c83f170048d92409b2","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/simility-name-move/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/simility-name-move/","section":"post","tags":["exam---"],"title":"simility-name-move","type":"post","url":"/post/code/python/00_exam---/simility-name-move/","weight":0,"wordcount":780},{"author":null,"categories":null,"content":"簡體轉繁體中文轉換器 (Chinese Converter) 一個輕量級的 Windows 桌面應用程式，可以快速將簡體中文轉換為繁體中文。程式會在系統托盤中運行，並提供快捷鍵功能，讓您隨時隨地進行文字轉換。\n功能特色 🔄 一鍵轉換：使用快捷鍵 Ctrl+Alt+C 快速轉換剪貼簿中的簡體中文為繁體中文 🖥️ 系統托盤：程式在系統托盤中運行，不佔用桌面空間 🚀 開機自啟：自動設定開機啟動，無需手動開啟 📋 剪貼簿整合：直接讀取和寫入剪貼簿內容，操作簡單直觀 🎯 高精度轉換：使用 OpenCC 引擎，提供準確的簡繁轉換 系統需求 Windows 10/11 Python 3.7+ (僅開發環境需要) 安裝與使用 方法一：使用預編譯執行檔 (推薦) 下載 ChineseConverter.exe 執行檔 雙擊執行即可開始使用 程式會自動在系統托盤中顯示圖標 使用 Ctrl+Alt+C 快捷鍵進行文字轉換 方法二：從原始碼編譯 確保已安裝 Python 3.7 或更高版本 安裝所需套件： pip install keyboard pyperclip opencc-python-reimplemented pystray pillow pyinstaller 執行編譯腳本： python setup.py 編譯完成後，在 build/exe.win-amd64-3.11/ 目錄中找到 ChineseConverter.exe 使用說明 啟動程式：執行 ChineseConverter.exe\n轉換文字：\n複製需要轉換的簡體中文文字到剪貼簿 按下 Ctrl+Alt+C 快捷鍵 轉換後的繁體中文會自動替換剪貼簿中的內容 貼上即可使用轉換後的文字 退出程式：右鍵點擊系統托盤中的圖標，選擇「退出」\n專案結構 app/\r├── app.py # 主程式檔案\r├── setup.py # PyInstaller 編譯腳本\r├── icon.png # 程式圖標\r├── ChineseConverter/ # 編譯後的執行檔目錄\r│ ├── app.py\r│ ├── setup.bat\r│ └── start.bat\r└── build/ # 編譯輸出目錄\r└── exe.win-amd64-3.11/\r└── ChineseConverter.exe 技術細節 轉換引擎：OpenCC …","date":1759881600,"dir":"post\\code\\python\\00_money\\simple-to-tradition-chinese-exe\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["money"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"2eb8eda087a2beac29d207e5457994d2","permalink":"https://wikihuangblog.github.io/post/code/python/00_money/simple-to-tradition-chinese-exe/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_money/simple-to-tradition-chinese-exe/","section":"post","tags":["money"],"title":"simple-to-tradition-chinese-exe","type":"post","url":"/post/code/python/00_money/simple-to-tradition-chinese-exe/","weight":0,"wordcount":791},{"author":null,"categories":null,"content":"簡體轉繁體中文工具 這是一個用於將簡體中文轉換為繁體中文的工具集，支援多種使用方式，包括剪貼簿轉換和批量文件處理。\n功能特色 🔄 剪貼簿轉換：快速轉換剪貼簿中的簡體中文為繁體中文 📁 批量文件處理：自動處理指定目錄下的所有 Markdown 文件 🎯 多種使用方式：支援 Python 腳本、PowerShell 腳本和批次檔 📊 深度控制：可設定目錄遍歷深度，避免處理過深的子目錄 🛡️ 錯誤處理：具備完善的錯誤處理機制 專案結構 app/\r├── app.py # 主要 Python 腳本（批量處理 Markdown 文件）\r├── translate.ps1 # PowerShell 腳本（剪貼簿轉換）\r├── goo.bat # 批次檔（執行 Python 腳本）\r├── issue.markdown # 問題記錄文件\r└── 00_version/ # 版本歷史\r├── v1_clipboard-ok;wait-wlak-through-centrain folder.py\r└── v2_all-target-folder-md,markdown-ok;wait-current-folder-cmd-bat.py 安裝需求 Python 環境 pip install opencc-python-reimplemented PowerShell 環境 需要安裝 Microsoft.International.Converters.PinYinConverter 組件（Windows 系統通常已內建）\n使用方法 方法一：剪貼簿轉換（PowerShell） 複製需要轉換的簡體中文文字到剪貼簿 執行 PowerShell 腳本： .\\translate.ps1 轉換後的繁體中文會自動存回剪貼簿 方法二：批量文件處理（Python） 修改 app.py 中的 target_path 變數，設定目標目錄： target_path = r\u0026amp;#34;你的目標目錄路徑\u0026amp;#34; 執行 Python 腳本： python app.py 或使用批次檔：\ngoo.bat 方法三：命令列參數（可選） 取消註解 app.py 中的命令列參數處理代碼，即可透過命令列指定目標路徑：\npython app.py \u0026amp;#34;目標目錄路徑\u0026amp;#34; 版本歷史 v1 - 剪貼簿版本 基本剪貼簿轉換功 …","date":1759881600,"dir":"post\\code\\python\\00_money\\simple-to-traditional-chinese\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["money"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"b61a7654b77dda027b6dc9cdcea8def8","permalink":"https://wikihuangblog.github.io/post/code/python/00_money/simple-to-traditional-chinese/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_money/simple-to-traditional-chinese/","section":"post","tags":["money"],"title":"simple-to-traditional-chinese","type":"post","url":"/post/code/python/00_money/simple-to-traditional-chinese/","weight":0,"wordcount":837},{"author":null,"categories":null,"content":"Markdown 文件分割工具 這是一個用於將大型 Markdown 文件按章節分割成小文件的 Python 工具，支援自動添加 YAML front matter、簡體中文轉繁體中文、圖片處理等功能。\n功能特色 📄 智能分割：根據 ### 標題自動分割 Markdown 文件 🏷️ 自動分類：根據內容自動判斷是否為程式碼類型並添加相應標籤 🔤 繁簡轉換：自動將簡體中文轉換為繁體中文 🖼️ 圖片處理：自動複製圖片到對應資料夾並更新路徑 📝 YAML Front Matter：自動生成包含標題、分類、時間等資訊的 YAML 前置資料 📁 結構化輸出：按編號創建子資料夾，便於管理 安裝需求 Python 套件 pip install opencc 系統需求 Python 3.6+ Windows 系統（用於執行 run.bat） 使用方法 方法一：使用批次檔（推薦） run.bat your_file.md 方法二：直接使用 Python python app.py your_file.md 輸出結構 工具會在當前目錄創建 split_sections 資料夾，結構如下：\nsplit_sections/\r├── 00/\r│ ├── 00_章節標題__________{codeQQ}_____.QQ.md\r│ └── pic/ (如果有圖片)\r│ └── image1.png\r├── 01/\r│ ├── 01_另一個章節__________{}_____.QQ.md\r│ └── pic/\r└── ... 檔案命名規則 格式：{編號:02d}_{標題}__________{{分類}}_____.QQ.md 編號：從 00 開始的兩位數編號 標題：從章節標題提取，移除特殊字元但保留 [v] 等標記 分類：根據內容自動判斷 codeQQ：包含程式碼區塊（java、python、c、csharp、javascript、vb、html） 空字串：一般內容 YAML Front Matter 格式 每個分割後的文件會自動添加以下 YAML 前置資料：\n--- title: 章節標題 category: codeQQ # 或空字串 tags: - \u0026amp;#34;codeQQ\u0026amp;#34; # 或空字串 description: keyword: - \u0026amp;#34;codeQQ\u0026amp;#34; # 或空字 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\big-md-to-part@@flow\\split-exam-as-ditto-clipboard-way\\","expirydate":-62135596800,"fuzzywordcount":1300,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"ba509d3ca5aa72c52c03db438e6fd63a","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/big-md-to-part@@flow/split-exam-as-ditto-clipboard-way/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_exam---/big-md-to-part@@flow/split-exam-as-ditto-clipboard-way/","section":"post","tags":["exam---"],"title":"split-exam-as-ditto-clipboard-way","type":"post","url":"/post/code/python/00_exam---/big-md-to-part@@flow/split-exam-as-ditto-clipboard-way/","weight":0,"wordcount":1264},{"author":null,"categories":null,"content":"PDF 水平分割工具 這是一個用於將水平 PDF 文件分割成垂直 PDF 文件的 Python 工具。該工具可以將每個 PDF 頁面從中間水平分割，將原本的橫向頁面轉換為兩個縱向頁面。\n功能特色 🔄 自動將水平 PDF 分割成垂直 PDF 📁 批量處理目標文件夾中的所有 PDF 文件 🛡️ 錯誤處理機制，確保程序穩定性 📦 使用 PyMuPDF (fitz) 庫，提供高質量的 PDF 處理 系統需求 Python 3.6 或更高版本 PyMuPDF 庫 安裝依賴 pip install PyMuPDF 使用方法 方法一：使用批處理文件（推薦） 將要處理的 PDF 文件放入 target 文件夾 雙擊運行 run.bat 文件 處理完成的文件將保存在 target/split_pdfs/ 文件夾中 方法二：直接運行 Python 腳本 python app.py [目標文件夾路徑] 例如：\npython app.py E:\\codeAll\\python\\00_exam---\\pdf-mindmap-@@flow\\split-horizontal-pdf-into-vertial-pdf\\app 文件結構 app/\r├── app.py # 主程序文件\r├── run.bat # Windows 批處理執行文件\r├── issue.txt # 專案說明\r├── target/ # 目標 PDF 文件存放文件夾\r│ ├── *.pdf # 待處理的 PDF 文件\r│ └── split_pdfs/ # 處理後的 PDF 文件輸出文件夾\r└── 00_version/ # 版本歷史文件夾\r├── v1_chinese-pdf-fail;try-print-no-text-version.py # v1 版本（使用 PyPDF2）\r└── v2_PyMuPDF.py # v2 版本（使用 PyMuPDF） 工作原理 讀取 PDF：使用 PyMuPDF 打開目標 PDF 文件 頁面分割：對每一頁進行水平分割 計算頁面中心點位置 創建左半部分和右半部分的矩形區域 將每個部分作為新頁面添加到輸出 PDF 保存結果：將處理後的 PDF 保存到指定文件夾 版本歷史 v1 版本 使用 PyPDF2 庫 在處理中文 PDF 時遇到問題 嘗試使用無文字版本但效果不佳 v2 版本（當前版本）  …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\pdf-mindmap-@@flow\\split-horizontal-pdf-into-vertial-pdf\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"2ed5f0187929820f4547e0fc0e20b54e","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/pdf-mindmap-@@flow/split-horizontal-pdf-into-vertial-pdf/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/pdf-mindmap-@@flow/split-horizontal-pdf-into-vertial-pdf/","section":"post","tags":["exam---"],"title":"split-horizontal-pdf-into-vertial-pdf","type":"post","url":"/post/code/python/00_exam---/pdf-mindmap-@@flow/split-horizontal-pdf-into-vertial-pdf/","weight":0,"wordcount":752},{"author":null,"categories":null,"content":"統計移動合併工具 (Statistic Move Combine Tool) 這是一個用於自動化文件移動和合併的 Python 工具，可以根據數字前綴匹配源目錄和目標目錄，並將文件從源目錄移動到對應的目標目錄。\n功能特點 🔍 智能匹配: 根據目錄名稱中的數字前綴自動匹配源目錄和目標目錄 📁 遞歸處理: 支持多層目錄結構的遞歸處理 🚀 自動移動: 自動將匹配的文件和目錄從源位置移動到目標位置 📝 詳細日誌: 提供詳細的操作日誌，顯示每個移動操作 系統要求 Python 3.6 或更高版本 Windows 操作系統（路徑配置為 Windows 格式） 安裝 克隆或下載此項目到本地 確保已安裝 Python 3.6+ 使用方法 配置路徑 在運行腳本之前，請修改 app.py 中的路徑配置：\n# 源路徑和目標路徑的基礎目錄 source_base = r\u0026amp;#34;你的源目錄路徑\u0026amp;#34; target_base = r\u0026amp;#34;你的目標目錄路徑\u0026amp;#34; 運行腳本 python app.py 工作原理 目錄掃描: 腳本會遍歷源基礎目錄的所有子目錄 數字前綴提取: 從源目錄名稱中提取數字前綴 目標匹配: 在目標目錄中查找具有相同數字前綴的子目錄 文件移動: 將源目錄中的文件和子目錄移動到匹配的目標目錄 匹配規則 源目錄名稱如 01_folder 會匹配目標目錄中名稱以 01 開頭的子目錄 支持多層目錄結構的遞歸處理 如果找不到匹配的目標目錄，會顯示相應的警告信息 目錄結構示例 源目錄結構:\rsource_base/\r├── subdir1/\r│ ├── 01_source/\r│ └── 02_source/\r└── subdir2/\r├── 03_source/\r└── 04_source/\r目標目錄結構:\rtarget_base/\r├── subdir1/\r│ ├── 01_target/\r│ └── 02_target/\r└── subdir2/\r├── 03_target/\r└── 04_target/ 注意事項 ⚠️ 重要提醒:\n此腳本會實際移動文件，請在運行前備份重要數據 確保目標目錄有足夠的寫入權限 建議先在測試環境中驗證腳本功能 輸出示例 已移動文件: D:\\source\\01_folder\\file1.txt -\u0026amp;gt; …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\00_stastic\\statistic-move-combine-with-yaml\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["exam---","stastic"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"8ac0648c993b4b09950083d179c7fd12","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/00_stastic/statistic-move-combine-with-yaml/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/00_stastic/statistic-move-combine-with-yaml/","section":"post","tags":["exam---","stastic"],"title":"statistic-move-combine-with-yaml","type":"post","url":"/post/code/python/00_exam---/00_stastic/statistic-move-combine-with-yaml/","weight":0,"wordcount":946},{"author":null,"categories":null,"content":"統計學題目整理工具 這是一個用於整理統計學題目的 Python 工具，可以自動將 HTML 文件移動到對應的資料夾中。\n功能說明 此工具會掃描當前目錄中的所有 HTML 文件，並根據文件名稱的前綴數字，將文件移動到對應的資料夾中。\n工作原理 掃描當前目錄中的所有 HTML 文件 提取文件名稱的前綴數字 尋找以該數字開頭的資料夾（格式：數字_） 將 HTML 文件移動到對應的資料夾中 範例 假設您有以下文件結構：\napp/\r├── 1.html\r├── 2.html\r├── 1_第一章/\r├── 2_第二章/\r└── app.py 執行腳本後：\napp/\r├── 1_第一章/\r│ └── 1.html\r├── 2_第二章/\r│ └── 2.html\r└── app.py 使用方法 確保您的 Python 環境已安裝 將 app.py 放在包含 HTML 文件和對應資料夾的目錄中 在終端機中執行： python app.py 系統需求 Python 3.x 無需額外的第三方套件 注意事項 確保 HTML 文件的名稱以數字開頭 確保對應的資料夾名稱格式為 數字_描述 腳本會直接移動文件，請確保重要文件已備份 如果找不到對應的資料夾，會顯示相應的提示訊息 輸出訊息 已將 [文件名] 移動到 [資料夾名] - 成功移動文件 未找到與 [文件名] 匹配的資料夾 - 找不到對應的資料夾 所有 HTML 檔案處理完成。 - 處理完成 授權 此項目為開源軟體，可自由使用和修改。\n","date":1759881600,"dir":"post\\code\\python\\00_exam---\\00_stastic\\statistic-q-to-yamol\\","expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":["exam---","stastic"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"22e1bf0223efac9f9c3c64229adc704a","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/00_stastic/statistic-q-to-yamol/","publishdate":"2025-10-08T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_exam---/00_stastic/statistic-q-to-yamol/","section":"post","tags":["exam---","stastic"],"title":"statistic-q-to-yamol","type":"post","url":"/post/code/python/00_exam---/00_stastic/statistic-q-to-yamol/","weight":0,"wordcount":463},{"author":null,"categories":null,"content":"磁碟同步差異工具 (Sync Diff Disk) 這是一個用於比較和同步不同磁碟間資料夾結構的 Python 工具。它可以分析兩個目錄的結構差異，並建議或執行檔案/資料夾的移動操作。\n功能特色 🔍 結構比較: 比較兩個目錄的資料夾結構 📁 智能移動: 自動建議需要移動的資料夾 🛡️ 安全操作: 避免覆蓋現有檔案，自動添加編號後綴 📝 詳細日誌: 提供完整的操作日誌記錄 ⚡ 深度控制: 可設定掃描深度，避免過度遍歷 系統需求 Python 3.6 或更高版本 Windows 作業系統（支援 Windows 路徑格式） 安裝與使用 1. 下載專案 git clone \u0026amp;lt;repository-url\u0026amp;gt; cd sync-diff-disk 2. 執行應用程式 python app.py 3. 配置路徑 在 app.py 檔案中修改以下變數：\nsource_path = r\u0026amp;#34;G:\\youtube\u0026amp;#34; # 源目錄路徑 target_path = r\u0026amp;#34;K:\\youtube\u0026amp;#34; # 目標目錄路徑 主要功能說明 get_folder_structure(path, depth=4) 獲取指定路徑的資料夾結構，預設掃描深度為 4 層。\n參數:\npath: 要掃描的目錄路徑 depth: 掃描深度（預設為 4） 返回:\n包含目錄結構的字典 compare_and_suggest_moves(source_path, target_path) 比較兩個目錄結構並建議需要移動的資料夾。\n參數:\nsource_path: 源目錄路徑 target_path: 目標目錄路徑 返回:\n包含移動建議的列表，每個元素為 (舊路徑, 新路徑) 的元組 execute_moves(moves) 執行建議的移動操作。\n參數:\nmoves: 移動操作列表 功能:\n自動創建目標目錄的父目錄 如果目標路徑已存在，自動添加編號後綴 記錄所有操作和錯誤 使用範例 # 設定源目錄和目標目錄 source_path = r\u0026amp;#34;D:\\00_DIY\u0026amp;#34; target_path = r\u0026amp;#34;I:\\00_DIY\u0026amp;#34; # 獲取移動建議 suggested_moves = compare_and_suggest_moves(source_path, …","date":1759881600,"dir":"post\\code\\python\\00_backup\\sync-diff-disk\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["backup"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"2c664461c931e5890f9887fcc193b43a","permalink":"https://wikihuangblog.github.io/post/code/python/00_backup/sync-diff-disk/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_backup/sync-diff-disk/","section":"post","tags":["backup"],"title":"sync-diff-disk","type":"post","url":"/post/code/python/00_backup/sync-diff-disk/","weight":0,"wordcount":908},{"author":null,"categories":null,"content":"專案說明 這是一個 Python 應用程式專案。\n專案結構 app/\r├── 00_version/\r│ └── app___original___.lnk\r├── xxxx.py\r└── README.md 檔案說明 xxxx.py - 主要的 Python 程式檔案 00_version/ - 版本控制相關檔案目錄 app___original___.lnk - 原始應用程式的連結檔案 安裝與執行 系統需求 Python 3.x 執行方式 python xxxx.py 開發說明 此專案目前處於開發階段，主要程式檔案為 xxxx.py。\n版本資訊 版本相關檔案存放在 00_version/ 目錄中。\n授權 請在此處添加授權資訊。\n聯絡資訊 請在此處添加聯絡資訊。\n","date":1759881600,"dir":"post\\code\\python\\00_tmp-not-organize\\testallMove22222\\","expirydate":-62135596800,"fuzzywordcount":200,"html":null,"keywords":["tmp-not-organize"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"f22e5a4c5855ef25d15736d2532fa657","permalink":"https://wikihuangblog.github.io/post/code/python/00_tmp-not-organize/testallmove22222/","publishdate":"2025-10-08T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_tmp-not-organize/testallmove22222/","section":"post","tags":["tmp-not-organize"],"title":"testallMove22222","type":"post","url":"/post/code/python/00_tmp-not-organize/testallmove22222/","weight":0,"wordcount":171},{"author":null,"categories":null,"content":"視窗切換工具 (Window Switch Tool) 這是一個使用 AutoHotkey 腳本開發的視窗切換工具，可以快速在不同視窗之間切換並執行特定操作。\n功能說明 快速視窗切換: 按下 F3 鍵即可快速切換視窗 自動化操作: 切換視窗後自動執行 F1 鍵操作 延遲控制: 內建適當的延遲時間確保操作穩定性 檔案結構 app/\r├── switch-window.ahk # 主要的 AutoHotkey 腳本檔案\r├── 00_version/ # 版本控制目錄\r│ └── app___original___.lnk # 原始應用程式連結\r└── README.md # 說明文件 使用方法 前置需求 安裝 AutoHotkey 軟體 確保系統已安裝並可正常運行 AutoHotkey 執行步驟 下載或複製 switch-window.ahk 檔案 雙擊執行該檔案，或右鍵選擇「Compile Script」編譯為 .exe 檔案 腳本執行後，按下 F3 鍵即可觸發視窗切換功能 操作流程 當按下 F3 鍵時，腳本會執行以下操作：\n使用 Alt+Tab 切換到上一個視窗 等待 500 毫秒 按下 F1 鍵執行特定操作 再次等待 500 毫秒 使用 Alt+Tab 切換回原視窗 腳本說明 f3:: # 綁定 F3 鍵 Loop, 1 # 執行一次循環 { Send, {Blind}{Alt Down}{Tab}{Alt Up} # 切換視窗 Sleep, 500 # 等待 500 毫秒 Send, {f1} # 按下 F1 鍵 Sleep, 500 # 等待 500 毫秒 Send, {Blind}{Alt Down}{Tab}{Alt Up} # 切換回原視窗 } 自訂設定 您可以根據需要修改以下參數：\n延遲時間: 修改 Sleep, 500 中的數值（單位：毫秒） 觸發按鍵: 修改 f3:: 為其他按鍵組合 執行操作: 修改 Send, {f1} 為其他按鍵或操作 注意事項 請確保在執行腳本前，目標應用程式已開啟並可接受 F1 鍵操作 腳本使用 {Blind} 模式發送按鍵，確保按鍵組合正確執行 如需停止腳本，請在系統托盤中找到 AutoHotkey 圖示並右鍵選擇退出 版本資訊 當前版本：1.0 開發語言：AutoHotkey 相容系統：Windows 授權 此專案僅 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\syncQQ@@flow\\toggle-edge-pic-window-for-listen-Q\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"45522fce13574b2d4748bcf48243cdaa","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/syncqq@@flow/toggle-edge-pic-window-for-listen-q/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/syncqq@@flow/toggle-edge-pic-window-for-listen-q/","section":"post","tags":["exam---"],"title":"toggle-edge-pic-window-for-listen-Q","type":"post","url":"/post/code/python/00_exam---/syncqq@@flow/toggle-edge-pic-window-for-listen-q/","weight":0,"wordcount":606},{"author":null,"categories":null,"content":"TOKO OCR 圖片文字識別工具 這是一個基於 Python 和 Tesseract OCR 的圖片文字識別工具，可以將圖片中的文字提取出來並轉換為 Markdown 格式。\n功能特色 支援多種圖片格式（JPG、PNG 等） 使用 Tesseract OCR 引擎進行文字識別 支援繁體中文識別 自動將識別結果輸出為 Markdown 格式 批次處理資料夾中的所有圖片 系統需求 Python 3.6+ Tesseract OCR 相關 Python 套件 安裝步驟 1. 安裝 Tesseract OCR Windows 下載並安裝 Tesseract OCR 預設安裝路徑：C:\\Program Files\\Tesseract-OCR\\tesseract.exe macOS brew install tesseract Ubuntu/Debian sudo apt-get install tesseract-ocr 2. 安裝 Python 套件 pip install pytesseract pillow 使用方法 基本用法 python app.py \u0026amp;lt;輸入資料夾路徑\u0026amp;gt; 範例 # 處理 input 資料夾中的圖片 python app.py input # 處理 v1 資料夾中的圖片 python app.py input/v1 專案結構 toko-ocr/\r├── app.py # 主程式\r├── input/ # 輸入資料夾\r│ ├── input.md # 輸出結果\r│ ├── *.jpg # 待處理的圖片\r│ └── v1/ # 子資料夾\r│ ├── input.md # 輸出結果\r│ └── *.jpg # 待處理的圖片\r└── README.md # 說明文件 程式碼說明 主要類別：ImageOCRProcessor __init__(input_folder, languages, tesseract_cmd): 初始化 OCR 處理器 ocr_image(image_path, language): 對單一圖片進行 OCR 識別 process_images(): 批次處理資料夾中的所有圖片 設定參數 languages: 識別語言，預設為 [\u0026#39;chi_tra\u0026#39;]（繁體中文） tesseract_cmd: Tesseract …","date":1759881600,"dir":"post\\code\\python\\ch09_eng\\toko-ocr\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":[""],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"4efe18ddac7c90eb6c28cc08266e5044","permalink":"https://wikihuangblog.github.io/post/code/python/ch09_eng/toko-ocr/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/ch09_eng/toko-ocr/","section":"post","tags":[""],"title":"toko-ocr","type":"post","url":"/post/code/python/ch09_eng/toko-ocr/","weight":0,"wordcount":677},{"author":null,"categories":null,"content":"HTML 英文翻譯工具 這是一個用於將 HTML 文件中的英文內容翻譯為繁體中文的 Python 應用程式。主要用於處理課程轉錄文件，將英文內容翻譯並生成雙語對照的 HTML 文件。\n功能特色 🔄 自動翻譯 HTML 文件中的英文內容為繁體中文 📝 支援課程轉錄文件的特殊格式處理 🎨 生成雙語對照的 HTML 輸出 📦 批次處理多個 HTML 文件 ⚡ 智能文本分塊，避免翻譯長度限制 🎯 使用 Google Translate API 進行高品質翻譯 系統需求 Python 3.6 或更高版本 網路連線（用於 Google Translate API） 安裝依賴 pip install beautifulsoup4 googletrans==4.0.0rc1 htmlmin 使用方法 方法一：使用批次檔（推薦） 將 go.bat 文件複製到包含 HTML 文件的目標資料夾 雙擊執行 go.bat 程式會自動處理該資料夾中的所有 .html 文件 方法二：使用命令列 python app.py \u0026amp;lt;目標資料夾路徑\u0026amp;gt; 例如：\npython app.py ./target 文件結構 app/\r├── app.py # 主要程式檔案\r├── go.bat # Windows 批次執行檔\r├── target/ # 目標 HTML 文件資料夾\r│ └── *.html # 待翻譯的 HTML 文件\r└── README.md # 說明文件 程式功能說明 HTMLTranslator 類別 __init__(target_folder): 初始化翻譯器，設定目標資料夾 split_text(text, max_length=4500): 將長文本分割成適合翻譯的小塊 translate_text(text): 使用 Google Translate 翻譯文本 translate_html_file(file_path): 翻譯單個 HTML 文件 process_files(): 批次處理資料夾中的所有 HTML 文件 支援的 HTML 結構 程式會自動識別以下 HTML 結構：\nh3.classroom-transcript__title - 課程標題 div.classroom-transcript__lines \u0026amp;gt; p - …","date":1759881600,"dir":"post\\code\\python\\ch09_eng\\translate-eng-srt\\","expirydate":-62135596800,"fuzzywordcount":800,"html":null,"keywords":[""],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"c0ef1ed30ae01b8ac353872114eaf941","permalink":"https://wikihuangblog.github.io/post/code/python/ch09_eng/translate-eng-srt/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/ch09_eng/translate-eng-srt/","section":"post","tags":[""],"title":"translate-eng-srt","type":"post","url":"/post/code/python/ch09_eng/translate-eng-srt/","weight":0,"wordcount":784},{"author":null,"categories":null,"content":"Markdown 翻譯工具 這是一個用於將英文 Markdown 文件翻譯成繁體中文並生成 HTML 格式輸出的 Python 工具。\n功能特色 🔄 自動翻譯：使用 Google Translate API 將英文內容翻譯成繁體中文 📝 Markdown 支援：支援 Markdown 格式的文本處理 🎨 HTML 輸出：生成美觀的 HTML 文件，包含原文和譯文對照 ⚡ 智能分塊：自動將長文本分割成適當大小的塊進行翻譯 🎯 特殊處理：保留特殊詞彙（如人名）不被翻譯 📊 API 統計：顯示翻譯過程中的 API 調用次數 系統需求 Python 3.6+ 網路連線（用於 Google Translate API） 安裝依賴 pip install googletrans==4.0.0rc1 使用方法 方法一：使用批次檔（推薦） # Windows run.bat \u0026amp;#34;輸入文件路徑\u0026amp;#34; # 範例 run.bat \u0026amp;#34;memo.md\u0026amp;#34; 方法二：直接執行 Python 腳本 python app.py \u0026amp;#34;輸入文件路徑\u0026amp;#34; # 範例 python app.py \u0026amp;#34;memo.md\u0026amp;#34; 輸出格式 程式會生成與輸入文件同名的 HTML 文件，包含：\n翻譯後的中文內容 原始英文內容 美觀的 HTML 格式排版 特殊詞彙的保留處理 項目結構 app/\r├── app.py # 主程式\r├── run.bat # Windows 批次執行檔\r├── memo.md # 範例輸入文件\r├── memo.html # 範例輸出文件\r├── memo-short.md # 短版範例文件\r├── 00_version/ # 版本歷史\r│ ├── v1_translate-ok.py # 第一版：基本翻譯功能\r│ ├── v2_combine-call-onetime-split.py\r│ ├── v3_remove-table-line-split-ok.py\r│ ├── v4_big-translate-ok.py\r│ ├── v5_ok-exclude-special-name-tts.py\r│ └── v6_input-para.py # 最新版：支援命令行參數\r├── test/ # 測試文件\r│ ├── memo-short.md\r│ …","date":1759881600,"dir":"post\\code\\python\\ch09_eng\\translate-md\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":[""],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"5d4c8d918c6f0a9fd82cff7ef39a5568","permalink":"https://wikihuangblog.github.io/post/code/python/ch09_eng/translate-md/","publishdate":"2025-10-08T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/ch09_eng/translate-md/","section":"post","tags":[""],"title":"translate-md","type":"post","url":"/post/code/python/ch09_eng/translate-md/","weight":0,"wordcount":1146},{"author":null,"categories":null,"content":"文字轉多欄圖片工具 這是一個將文字檔案轉換為多欄格式圖片的 Python 工具，特別適用於將長文字內容以視覺化的方式呈現。\n功能特色 將文字檔案內容轉換為多欄格式的圖片 支援中文字體顯示 跨平台字體支援（Windows、macOS、Linux） 可自訂欄數、圖片高度和字體大小 自動調整行間距和邊距 系統需求 Python 3.6+ Pillow (PIL) 套件 安裝依賴 pip install Pillow 使用方法 將要轉換的文字內容放入 combined_titles.txt 檔案中 執行主程式： python app.py 程式會自動生成 !!output.jpg 圖片檔案 程式參數 在 app.py 中可以調整以下參數：\nnum_columns: 欄數（預設：5） image_height: 圖片高度（預設：800） font_size: 字體大小（預設：15） 字體支援 程式會自動偵測並使用以下字體（依優先順序）：\nmacOS: PingFang.ttc Linux: DroidSansFallbackFull.ttf Windows: msyh.ttc (微軟雅黑) 檔案結構 app/\r├── app.py # 主程式\r├── combined_titles.txt # 輸入文字檔案\r├── combined_titles-old.txt # 舊版文字檔案\r├── combined_titles-toeic-stand.txt # TOEIC 標準文字檔案\r├── 新純文字檔案.txt # 新文字檔案\r├── !!output.jpg # 輸出圖片\r├── !bestsize.jpg # 最佳尺寸圖片\r└── README.md # 說明文件 範例輸出 程式會根據輸入的文字內容生成多欄格式的圖片，每欄寬度固定為 300 像素，並自動調整行間距以獲得最佳的視覺效果。\n自訂設定 如需修改輸出格式，可以編輯 app.py 中的以下參數：\n# 在 create_multicolumn_image 函數中 column_width = 300 # 欄寬 line_height = font_size + 2 # 行間距 x = i * column_width + 5 # 左邊距 y = 5 # 上邊距 注意事項 確保輸入的文字檔案使用 UTF-8 編碼 文字內 …","date":1759881600,"dir":"post\\code\\python\\00_exam---\\txt-to-multi-column-pic\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"da0e1a07428f96e223f8382606a21705","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/txt-to-multi-column-pic/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/txt-to-multi-column-pic/","section":"post","tags":["exam---"],"title":"txt-to-multi-column-pic","type":"post","url":"/post/code/python/00_exam---/txt-to-multi-column-pic/","weight":0,"wordcount":579},{"author":null,"categories":null,"content":"快捷方式更新工具 (Shortcut Update Tool) 這是一個用於批量更新 Windows 快捷方式（.lnk 文件）的 Python 工具。該工具可以遞歸地遍歷指定資料夾中的所有 .lnk 文件，並更新它們的目標路徑和參數。\n功能特色 🔄 批量更新多個快捷方式文件 📁 遞歸遍歷子資料夾 🎯 自定義目標路徑 ⚙️ 修改快捷方式參數 🪟 Windows 專用（使用 win32com.client） 系統需求 Windows 作業系統 Python 3.x pywin32 套件 安裝依賴 pip install pywin32 使用方法 基本使用 修改 app.py 中的配置：\n# 指定要更新的資料夾路徑 folder_path = \u0026amp;#34;你的資料夾路徑\u0026amp;#34; # 指定新的目標程序路徑 targetPath = \u0026amp;#34;C:\\\\Program Files\\\\JetBrains\\\\WebStorm 2024.1.1\\\\bin\\\\webstorm64.exe\u0026amp;#34; 執行程式：\npython app.py 程式功能說明 update_shortcut_target_with_targetPath(lnk_path, targetPath) 更新單個快捷方式文件的目標路徑 同時修改快捷方式的參數 modify_argument(input_string, new_target_file) 解析並修改快捷方式的參數 使用正則表達式匹配參數格式：路徑 --line 行號 \u0026amp;quot;目標文件\u0026amp;quot; update_all_shortcuts_in_folder(folder_path, targetPath) 遞歸遍歷指定資料夾 找到所有 .lnk 文件並批量更新 專案結構 app/\r├── app.py # 主程式文件\r├── target/ # 範例快捷方式文件\r│ ├── chapter-lesson-number/\r│ ├── delete-no-need-tag/\r│ ├── srt/\r│ ├── start/\r│ ├── timer-next/\r│ ├── toc/\r│ └── video-srt-file-download/\r└── README.md # 說明文件 範例快捷方式文件 專案包含多個範例快捷方式文件，按功能分類： …","date":1759881600,"dir":"post\\code\\python\\00_code\\update-lnk\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["code"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"f8cc1c05f077ff93f3c817132cee3e26","permalink":"https://wikihuangblog.github.io/post/code/python/00_code/update-lnk/","publishdate":"2025-10-08T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_code/update-lnk/","section":"post","tags":["code"],"title":"update-lnk","type":"post","url":"/post/code/python/00_code/update-lnk/","weight":0,"wordcount":641},{"author":null,"categories":null,"content":"日曆生成器 (Calendar Generator) 一個使用 Python 和 matplotlib 生成日曆的簡單應用程式，可以生成單月日曆圖片或整年日曆 PDF 文件。\n功能特色 📅 生成單月日曆圖片 (PNG 格式) 📚 生成整年日曆 PDF 文件 🎨 可自定義網格顏色和背景顏色 📄 A4 橫向格式，適合列印 🔧 高解析度輸出 (300 DPI) 系統需求 Python 3.6+ matplotlib calendar (Python 內建模組) 安裝依賴 pip install matplotlib 使用方法 生成單月日曆 from app import create_calendar # 生成 2025 年 1 月的日曆 create_calendar(2025, 1, cell_size=1, grid_color=\u0026amp;#39;black\u0026amp;#39;, block_color=\u0026amp;#39;white\u0026amp;#39;) 生成整年日曆 from app import create_year_calendar # 生成 2025 年整年日曆 PDF create_year_calendar(2025, cell_size=1, grid_color=\u0026amp;#39;black\u0026amp;#39;, block_color=\u0026amp;#39;white\u0026amp;#39;) 參數說明 create_calendar 函數 year: 年份 (整數) month: 月份 (1-12) cell_size: 日曆格子大小 (預設: 1) grid_color: 網格線顏色 (預設: \u0026amp;lsquo;black\u0026amp;rsquo;) block_color: 背景顏色 (預設: \u0026amp;lsquo;white\u0026amp;rsquo;) create_year_calendar 函數 year: 年份 (整數) cell_size: 日曆格子大小 (預設: 1) grid_color: 網格線顏色 (預設: \u0026amp;lsquo;black\u0026amp;rsquo;) block_color: 背景顏色 (預設: \u0026amp;lsquo;white\u0026amp;rsquo;) 輸出文件 單月日曆: calendar.png 整年日曆: calendar_YYYY.pdf (例如: calendar_2025.pdf) 範例輸出 程式會生成：\n清晰的網格線 星期標題 (Sun, …","date":1759881600,"dir":"post\\code\\python\\00_version\\version-diff\\","expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":["version"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"47e37125dda3ddca916e5ccf2d7c4c19","permalink":"https://wikihuangblog.github.io/post/code/python/00_version/version-diff/","publishdate":"2025-10-08T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_version/version-diff/","section":"post","tags":["version"],"title":"version-diff","type":"post","url":"/post/code/python/00_version/version-diff/","weight":0,"wordcount":495},{"author":null,"categories":null,"content":"Wish Case OOP - 志願選填系統 這是一個基於 Python 和 SQLite 的志願選填系統，採用物件導向程式設計（OOP）架構重新開發。\n📋 專案概述 Wish Case OOP 是一個完整的志願選填系統，提供學生登入、資料查詢、學校科系資訊管理等功能。系統採用現代化的 Web 介面設計，支援響應式布局和直觀的用戶體驗。\n✨ 功能特色 🔐 用戶認證系統 安全的用戶登入機制 密碼加密存儲 會話管理 多角色支援（管理員、學生） 👨‍🎓 學生資料管理 學生基本資料查詢 身分證號驗證 考試類別管理 學校代碼關聯 🏫 學校科系資料 完整的學校科系代碼資料庫 考試類別分類 動態查詢功能 API 端點支援 🌐 Web 介面 現代化響應式設計 直觀的用戶介面 即時資料顯示 移動設備友好 🗄️ 資料庫結構 系統包含四個主要資料表：\n資料表 說明 記錄數 SCHCODE 學校科系代碼資料 ~239 EXAM_BASIC_STUDENT 學生基本資料 ~80 TITLE 考試類別資料 ~18 users 用戶登入資料 4 🚀 快速開始 1. 環境需求 Python 3.7+ SQLite 3 現代瀏覽器 2. 安裝依賴 pip install -r wishcase-oop/requirements.txt 3. 設定資料庫 cd wishcase-oop python initDB/setup_database.py 這將會：\n創建 SQLite 資料庫 (initDB/wishcase.db) 從 initDB/orisql/ 目錄中的 SQL 檔案匯入資料 創建測試用戶帳號 4. 測試系統 python test_system.py 5. 啟動 Web 服務器 python web_login.py 然後在瀏覽器中開啟：http://localhost:5000\n🔑 測試帳號 系統預設提供以下測試帳號：\n用戶名 密碼 學生ID 角色 說明 admin admin123 ADMIN001 管理員 系統管理員帳號 student1 student123 V112329401 學生 學生帳號1 student2 student123 V112397490 學生 學生帳號2 test test123 B112330456 學生 測試帳號 🔌 API …","date":1759881600,"dir":"post\\code\\python\\00_UI-user-feedback\\wishcase\\wishcse-tidy-flow\\","expirydate":-62135596800,"fuzzywordcount":1600,"html":null,"keywords":["UI-user-feedback"],"kind":"page","lang":"en","lastmod":1759881600,"objectID":"3955256a18c3199d4188b816a3997569","permalink":"https://wikihuangblog.github.io/post/code/python/00_ui-user-feedback/wishcase/wishcse-tidy-flow/","publishdate":"2025-10-08T00:00:00Z","readingtime":4,"relpermalink":"/post/code/python/00_ui-user-feedback/wishcase/wishcse-tidy-flow/","section":"post","tags":["UI-user-feedback"],"title":"wishcse-tidy-flow","type":"post","url":"/post/code/python/00_ui-user-feedback/wishcase/wishcse-tidy-flow/","weight":0,"wordcount":1590},{"author":null,"categories":null,"content":"華藝電子書分類爬蟲工具 專案簡介 這是一個用於解析華藝電子書網站分類結構並自動生成對應 URL 檔案的 Python 工具。該工具可以從 HTML 檔案中提取書籍分類資訊，並為每個分類創建對應的 .url 檔案，方便使用者快速訪問特定分類的書籍頁面。\n功能特色 🔍 自動解析 HTML 結構：從華藝電子書網站的 HTML 檔案中提取分類資訊 📁 智能檔案管理：自動創建對應的資料夾結構 🔗 URL 檔案生成：為每個分類生成可直接點擊的 .url 檔案 ⚙️ 靈活配置：支援多種處理選項，可自訂是否包含子分類 🛡️ 檔案名稱清理：自動處理不合法的檔案名稱字元 專案結構 app/\r├── app.py # 主要程式檔案\r├── all-topic.html # 華藝電子書分類的 HTML 原始碼\r├── issue.markdown # 專案說明文件\r├── pic/ # 圖片資料夾\r│ └── image-20250227000234250.png\r├── 剪貼簿內容文字.txt # 相關文字內容\r└── 華藝電子書分類/ # 自動生成的分類資料夾\r├── 商管‧財經/\r├── 文學‧小說/\r├── 設計‧藝術/\r├── 生活/\r├── 圖文‧漫畫/\r├── 科普/\r├── 人文/\r├── 社科/\r├── 親子‧童書/\r├── 語言/\r├── 電腦/\r├── 考用‧參考書/\r├── 理工農醫/\r├── 學術書/\r├── 政府出版品/\r└── 多媒體電子書/ 安裝需求 Python 套件依賴 pip install beautifulsoup4 系統需求 Python 3.6 或更高版本 Windows 系統（用於生成 .url 檔案） 使用方法 1. 基本使用 python app.py 2. 程式配置選項 在 app.py 的 main() 函數中，您可以調整以下參數：\n# 設定基礎資料夾名稱 base_folder = \u0026amp;#34;華藝電子書分類\u0026amp;#34; # 設定是否要排除與主分類相同名稱的子分類 exclude_same_subcats = True # True 或 False # 設定是否要包含子分類 include_subcategories = False # True 或 False 3. 參數說明 base_folder： …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\crawl-ebook-@@flow\\all-big-free-ebook-topic\\","expirydate":-62135596800,"fuzzywordcount":1600,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"f6ccdc580a3e8dd384fc2793d71f1d7c","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/crawl-ebook-@@flow/all-big-free-ebook-topic/","publishdate":"2025-10-05T00:00:00Z","readingtime":4,"relpermalink":"/post/code/python/00_ebook/crawl-ebook-@@flow/all-big-free-ebook-topic/","section":"post","tags":["ebook"],"title":"all-big-free-ebook-topic","type":"post","url":"/post/code/python/00_ebook/crawl-ebook-@@flow/all-big-free-ebook-topic/","weight":0,"wordcount":1552},{"author":null,"categories":null,"content":"📚 章節內容自動生成工具 🎯 專案概述 這是一個用於自動生成電子書章節內容的 Python 工具。該工具能夠掃描指定的目錄結構，識別章節和小節，並為每個 Markdown 檔案自動生成包含章節資訊、結構導覽和內容預覽的完整內容。\n✨ 主要功能 🔍 智能章節識別 自動掃描目錄結構，識別章節資料夾 支援多種章節命名格式（如「第 X 章」、「ch01_UNIT-1」等） 動態建立章節與小節的層級關係 📋 內容自動生成 為每個 Markdown 檔案生成標準化的章節內容 包含章節所屬資訊、完整章節結構導覽 自動標示當前小節位置 根據內容類型生成不同的說明模板 🎨 多樣化內容模板 主章節：包含章節概述、學習目標 習題章節：提供練習題目結構 Python 相關：重點概念說明 一般內容：學習重點和應用範例 📁 專案結構 app/\r├── app.py # 主程式檔案\r├── 00_target/ # 目標目錄（包含原始章節結構）\r├── 00_output/ # 輸出目錄（處理後的檔案）\r├── 00_version/ # 版本歷史檔案\r├── backuuppp/ # 備份目錄\r├── ch01_UNIT-1-WHAT-IS-A-PARAGRAPH/ # 範例章節\r├── python-book/ # Python 書籍章節\r├── toeic/ # TOEIC 教材章節\r├── goo.bat # 批次執行腳本\r├── issue.md # 專案需求說明\r└── README.md # 專案說明文件 🚀 使用方法 基本使用 # 使用預設目標目錄 (00_target) python app.py # 指定自訂目標目錄 python app.py your_target_directory 批次執行 # 使用提供的批次檔 goo.bat your_target_directory 🔧 核心功能說明 1. 章節資料夾識別邏輯 程式會自動判斷哪些資料夾是章節資料夾，判斷條件：\n必須有兄弟資料夾（同層級有其他資料夾） 必須包含多個子資料夾（至少 2 個） 2. 章節編號提取 支援多種章節編號格式：\n第 X 章 格式 數字開頭格式 ch01_UNIT-1 格式 3. 內容生成模板 根據檔案類型自動選擇合適的內容模板：\n主章節模板 # 章節標題 ## 📚 章節所屬 **所屬章節：** …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\ch-toc-searchable-@@flow\\append-chapter-text\\","expirydate":-62135596800,"fuzzywordcount":1400,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"e1293471e97cd9f49eb3331424c35e26","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/ch-toc-searchable-@@flow/append-chapter-text/","publishdate":"2025-10-05T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/append-chapter-text/","section":"post","tags":["ebook"],"title":"append-chapter-text","type":"post","url":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/append-chapter-text/","weight":0,"wordcount":1380},{"author":null,"categories":null,"content":"書籍 URL 爬蟲與快捷方式生成器 這是一個用於爬取旗標出版社書籍資訊並生成 URL 快捷方式的 Python 專案。\n專案概述 本專案包含三個主要腳本，用於處理旗標出版社的書籍編號，並生成對應的 URL 快捷方式文件：\napp.py - 基本版本，直接生成 URL 快捷方式 v5_title-not-get-content-instead.py - 進階版本，爬取網頁標題並生成帶標題的快捷方式 v6_zip-url.py - 專門用於生成 ZIP 下載連結的快捷方式 檔案結構 app/\r├── app.py # 基本 URL 生成器\r├── v5_title-not-get-content-instead.py # 帶標題爬蟲版本\r├── v6_zip-url.py # ZIP 下載連結生成器\r├── number.txt # 書籍編號列表\r├── urls/ # 生成的 URL 快捷方式目錄\r└── README.md # 專案說明文件 功能特色 app.py 讀取 number.txt 中的書籍編號 生成旗標出版社產品頁面的 URL 快捷方式 將所有快捷方式保存到 urls/ 目錄 v5_title-not-get-content-instead.py 爬取每個書籍頁面的標題 為每個書籍編號創建專屬資料夾 生成帶有書籍標題的 URL 快捷方式 包含錯誤處理和日誌記錄功能 v6_zip-url.py 生成 ZIP 檔案下載連結的快捷方式 使用固定的 \u0026amp;ldquo;zipRef\u0026amp;rdquo; 標題 適用於直接下載書籍相關檔案 安裝需求 pip install requests beautifulsoup4 使用方法 1. 準備書籍編號 在 number.txt 文件中輸入書籍編號，每行一個：\nF1005\rF2035\rF2005\r... 2. 執行腳本 基本版本（app.py） python app.py 進階版本（v5_title-not-get-content-instead.py） python v5_title-not-get-content-instead.py ZIP 連結版本（v6_zip-url.py） python v6_zip-url.py 輸出結果 app.py 輸出 在 urls/ 目錄下生成 {編號}.url 檔案 每個檔案包含對應的產品頁 …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\book-code-toc-link-crawl-title\\","expirydate":-62135596800,"fuzzywordcount":900,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"5d4fbaf598c3cd30d8739e8c7ba257be","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/book-code-toc-link-crawl-title/","publishdate":"2025-10-05T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/book-code-toc-link-crawl-title/","section":"post","tags":["ebook"],"title":"book-code-toc-link-crawl-title","type":"post","url":"/post/code/python/00_ebook/book-code-toc-link-crawl-title/","weight":0,"wordcount":851},{"author":null,"categories":null,"content":"書籍目錄轉資料夾結構工具 這是一個 Python 工具，可以將 Markdown 格式的書籍目錄（TOC）轉換成結構化的資料夾和檔案系統。\n功能特色 📁 自動建立階層式資料夾結構 📝 為每個章節建立對應的 Markdown 檔案 🔍 自動生成 Google 搜尋連結 📚 支援以原始書籍名稱作為父資料夾 🔢 自動格式化檔案名稱以利排序 🗂️ 智慧整理章節資料夾結構 安裝需求 Python 3.6 或更高版本 無需額外套件依賴 使用方法 基本用法 python app.py \u0026amp;#34;書籍檔案名稱.md\u0026amp;#34; 範例 python app.py \u0026amp;#34;從零開始打造線上志願選填系統_前端-後端到雲端部署的完整實戰.md\u0026amp;#34; 輸入格式 您的 Markdown 檔案應該包含階層式目錄結構，例如：\n- **第 1 章：導讀與環境建置** - **1.1 本書導讀** - 本書適合誰？ - 我們將一起打造出什麼系統？ - **1.2 系統核心觀念與流程分析** - 什麼是「志願報名系統」？ - 系統核心流程圖解 - **第 2 章：開發環境建置與技術棧選擇** - **2.1 打造現代化開發環境** - **2.2 技術棧選擇與介紹** 輸出結構 程式會建立以下資料夾結構：\n00_output/\r└── 書籍名稱/\r├── 第 1 章：導讀與環境建置/\r│ ├── 第 01 章：導讀與環境建置.md\r│ ├── 1.1 本書導讀/\r│ │ └── 01.01 本書導讀.md\r│ └── 1.2 系統核心觀念與流程分析/\r│ └── 01.02 系統核心觀念與流程分析.md\r└── 第 2 章：開發環境建置與技術棧選擇/\r├── 第 02 章：開發環境建置與技術棧選擇.md\r├── 2.1 打造現代化開發環境/\r│ └── 02.01 打造現代化開發環境.md\r└── 2.2 技術棧選擇與介紹/\r└── 02.02 技術棧選擇與介紹.md 生成的檔案內容 每個生成的 Markdown 檔案包含：\n# 章節標題 相關連結: https://www.google.com/search?q=章節標題 原始書籍名稱: 書籍檔案名稱 主要功能說明 1. 資料夾結構建立 根據目錄層級自動建立對應的資料夾 清理非法字元以確保檔案系統相容性 2. 檔案名稱格式化 自動為個位數章節編號補 …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\ch-toc-searchable-@@flow\\book-toc-to-folder-md-structure\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"ab7fd5be016e4f1887d14de198f8546d","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/ch-toc-searchable-@@flow/book-toc-to-folder-md-structure/","publishdate":"2025-10-05T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/book-toc-to-folder-md-structure/","section":"post","tags":["ebook"],"title":"book-toc-to-folder-md-structure","type":"post","url":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/book-toc-to-folder-md-structure/","weight":0,"wordcount":1006},{"author":null,"categories":null,"content":"華藝電子書爬蟲專案 這是一個用於爬取華藝電子書網站書籍資訊的 Python 專案，支援自動化爬取書籍標題、URL 連結、封面圖片和目錄內容。\n功能特色 🚀 異步爬取：使用 Playwright 和 asyncio 實現高效異步爬取 📚 多分類支援：支援按分類爬取不同類別的書籍 🖼️ 圖片下載：自動下載書籍封面圖片 📄 目錄爬取：可選功能，爬取書籍目錄並儲存為 HTML 🔄 斷點續傳：支援記錄爬取進度，可從上次中斷處繼續 📁 檔案整理：自動整理下載的檔案到對應資料夾 🔍 重複檢測：自動檢測並處理重複檔案 專案結構 crawl-ebook/\r├── app.py # 原始爬蟲腳本（舊版本）\r├── main.py # 主程式入口\r├── libs/ # 核心模組\r│ ├── BookCrawler.py # 書籍爬蟲類別\r│ ├── Config.py # 配置管理\r│ └── FileManager.py # 檔案管理\r├── 華藝電子書分類/ # 分類配置目錄\r│ └── 00_target/ # 目標分類 URL 檔案\r├── output/ # 輸出目錄\r├── 00_temp-ready-move-area/ # 臨時檔案區域\r│ ├── urls/ # URL 檔案\r│ └── images/ # 圖片檔案\r├── toc_html/ # 目錄 HTML 檔案\r└── crawler_config.json # 爬蟲配置檔案 安裝需求 系統需求 Python 3.7+ Windows 10/11 依賴套件 pip install playwright aiohttp configparser 安裝 Playwright 瀏覽器 playwright install chromium 使用方法 1. 準備分類 URL 檔案 在 華藝電子書分類/00_target/ 目錄下放置 .url 檔案，每個檔案代表一個書籍分類。\n2. 執行爬蟲 python main.py 3. 配置選項 在 libs/Config.py 中可以調整以下設定：\nUSE_AUTO_PAGE_CALCULATION = True # 是否自動計算總頁數 TEST_PAGE_NUMBER = 1 # 測試模式下的固定頁數 PAGE_SIZE = 20 # …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\crawl-ebook-@@flow\\crawl-ebook\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"cddd65ecea186781bba017151c265d74","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/crawl-ebook-@@flow/crawl-ebook/","publishdate":"2025-10-05T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_ebook/crawl-ebook-@@flow/crawl-ebook/","section":"post","tags":["ebook"],"title":"crawl-ebook","type":"post","url":"/post/code/python/00_ebook/crawl-ebook-@@flow/crawl-ebook/","weight":0,"wordcount":1061},{"author":null,"categories":null,"content":"HTML 目錄轉資料夾結構工具 這是一個 Python 應用程式，用於將 HTML 格式的目錄結構轉換為實際的資料夾層次結構，並為每個章節創建 PDF 頁面捷徑。\n功能特色 📁 解析 HTML 目錄結構（\u0026amp;lt;ul\u0026amp;gt; 和 \u0026amp;lt;li\u0026amp;gt; 標籤） 🗂️ 自動創建對應的資料夾層次結構 🔢 為每個資料夾添加層次編號前綴（如 01.00.00_） 🔗 為每個章節創建 PDF 頁面捷徑（.lnk 檔案） 🧹 自動清理資料夾名稱，移除 Windows 不允許的字符 📖 支援多層巢狀目錄結構 專案結構 app/\r├── app.py # 主要應用程式檔案\r├── Coding-Interviews.htm # 輸入的 HTML 目錄檔案\r├── folder/ # 生成的資料夾結構\r│ ├── 00_Cover/\r│ ├── 01_Chapter-1_-Interview-Process/\r│ ├── 02_Chapter-2_-Programming-Languages/\r│ └── ...\r├── 00_issue/ # 問題描述\r├── 00_ref/ # 參考檔案\r└── README.md # 本說明檔案 系統需求 Python 3.6+ Windows 作業系統（用於創建 .lnk 捷徑） 以下 Python 套件： beautifulsoup4 - HTML 解析 pywin32 - Windows COM 介面 安裝步驟 確保已安裝 Python 3.6 或更高版本 安裝必要的套件： pip install beautifulsoup4 pywin32 使用方法 將您的 HTML 目錄檔案命名為 Coding-Interviews.htm 並放在專案根目錄 在 app.py 中修改 PDF 檔案路徑（第 115 行）： pdf_path = r\u0026amp;#34;您的PDF檔案路徑\u0026amp;#34; 執行程式： python app.py 輸出結果 程式會：\n在 folder/ 目錄下創建對應的資料夾結構 每個資料夾名稱格式為：層次編號_清理後的章節名稱 在每個資料夾中創建對應 PDF 頁面的捷徑檔案（.lnk） 範例輸出結構 folder/\r├── 00.00_Contents-at-a-Glance/\r│ └── 3.lnk\r├── …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\ch-toc-searchable-@@flow\\D18_07_html-to-folder-tree\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"28a4d404a76d728ffafa278e348b7c40","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/ch-toc-searchable-@@flow/d18_07_html-to-folder-tree/","publishdate":"2025-10-05T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/d18_07_html-to-folder-tree/","section":"post","tags":["ebook"],"title":"D18_07_html-to-folder-tree","type":"post","url":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/d18_07_html-to-folder-tree/","weight":0,"wordcount":932},{"author":null,"categories":null,"content":"電子書目錄與封面提取工具 這是一個用於從電子書網站提取目錄（TOC）、封面縮略圖和相關資訊的 Python 工具。\n功能特色 🔍 自動化目錄提取：從指定的電子書網站自動提取章節目錄 🖼️ 封面縮略圖下載：提取並保存書籍封面圖片 📁 批次處理：支援大量 .url 檔案的批次處理 🧹 內容清理：自動移除不必要的圖片和樣式元素 📄 HTML 輸出：將提取的內容保存為格式化的 HTML 檔案 專案結構 app/\r├── app.py # 主要程式檔案\r├── 00_temp-ready-move-area/ # 待處理的 URL 檔案存放區\r│ └── urls/\r│ └── 語言/ # 按語言分類的 URL 檔案\r│ ├── eng2/ # 英文書籍 URL\r│ ├── 多益/ # 多益相關書籍 URL\r│ └── 英文/ # 英文學習書籍 URL\r├── 00_url-for-toc/ # 用於目錄提取的 URL 檔案\r│ └── urls/\r├── htmlToc/ # 輸出的 HTML 目錄檔案（執行後生成）\r└── ref/ # 參考檔案\r└── oriContent.html # 原始網頁內容範例 安裝需求 Python 套件 pip install requests beautifulsoup4 系統需求 Python 3.6 或更高版本 Windows 作業系統（程式碼中包含 Windows 路徑格式） 使用方法 1. 準備 URL 檔案 將要處理的電子書 URL 檔案放置在 00_url-for-toc/urls/ 目錄中。URL 檔案格式如下：\n[InternetShortcut]\rURL=https://example.com/ebook-url 2. 執行程式 python app.py 3. 查看結果 程式執行完成後，提取的目錄和封面資訊將保存在 htmlToc/ 目錄中，每個檔案對應一個 HTML 格式的目錄頁面。\n程式功能說明 主要功能 URL 檔案解析：讀取 .url 檔案中的網址資訊 網頁內容下載：使用 requests 下載網頁內容 HTML 解析：使用 BeautifulSoup 解析網頁結構 內容提取： 書籍標題（h1.book_title） 封面縮略圖（div.detail_pic_resize img） 章節目 …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\crawl-ebook-@@flow\\extract-toc-cover-thumbnail\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"b4741c34179bdbb8839f90774cf3237c","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/crawl-ebook-@@flow/extract-toc-cover-thumbnail/","publishdate":"2025-10-05T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/crawl-ebook-@@flow/extract-toc-cover-thumbnail/","section":"post","tags":["ebook"],"title":"extract-toc-cover-thumbnail","type":"post","url":"/post/code/python/00_ebook/crawl-ebook-@@flow/extract-toc-cover-thumbnail/","weight":0,"wordcount":908},{"author":null,"categories":null,"content":"Outlook 規則創建工具 這個項目包含多個腳本來解決 Outlook 規則創建時的參數錯誤問題。\n問題分析 根據測試結果，主要問題是：\n主題條件設置失敗：(-2147352571, \u0026#39;類型不符。\u0026#39;, None, 1) 規則保存失敗：(-2147352567, \u0026#39;發生例外狀況。\u0026#39;, (4096, \u0026#39;Microsoft Outlook\u0026#39;, \u0026#39;由於無效的動作或條件，無法儲存一個或多個規則。\u0026#39;, None, 0, -2147467259), None) 規則衝突：(-2147352567, \u0026#39;發生例外狀況。\u0026#39;, (4096, \u0026#39;Microsoft Outlook\u0026#39;, \u0026#39;一個或多個規則發生衝突。您必須解決衝突後，才能儲存規則。\u0026#39;, None, 0, -2147352567), None) 這表明 Outlook 的 COM 接口對主題條件的設置方式有特定要求，並且可能存在規則衝突。\n解決方案 1. 環境測試 首先運行環境測試腳本來檢查您的 Outlook 環境：\npython test_outlook.py 2. 清理版本（推薦） 使用清理版本，先刪除所有相關規則，然後重新創建：\npython app_clean.py 這個版本會清理所有相關的規則，避免衝突。\n3. 唯一名稱版本 使用時間戳生成唯一規則名稱，避免衝突：\npython app_unique.py 這個版本使用唯一的規則名稱，避免與現有規則衝突。\n4. 修復版本 使用修復版本，嘗試多種主題條件設置方法：\npython app_fixed.py 5. 無條件版本 如果主題條件仍然有問題，使用無條件版本：\npython app_no_condition.py 6. 其他版本 app_sender_condition.py - 發件人條件版本 app_simple.py - 簡化版本 app_advanced.py - 進階版本 app.py - 修改後的原始版本 測試結果分析 根據您的測試結果：\n✅ Outlook 連接正常 ✅ 文件夾創建正常 ✅ 規則創建正常 ✅ 移動動作設置正常 ❌ 主題條件設置失敗 ❌ 規則保存失敗（由於無效條件或規則衝突） 建議的使用順序 先運行清理版本：python app_clean.py 如果失敗，使用唯一名稱版本：python app_unique.py 手動在 Outlook  …","date":1759622400,"dir":"post\\code\\python\\00_mail\\00_fail\\outlook-rule\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":["mail","fail"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"82c72c316e043744cbb784c5ad7ac53b","permalink":"https://wikihuangblog.github.io/post/code/python/00_mail/00_fail/outlook-rule/","publishdate":"2025-10-05T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_mail/00_fail/outlook-rule/","section":"post","tags":["mail","fail"],"title":"outlook-rule","type":"post","url":"/post/code/python/00_mail/00_fail/outlook-rule/","weight":0,"wordcount":1140},{"author":null,"categories":null,"content":"電子書目錄分割工具 這是一個用於處理電子書目錄的 Python 工具，可以將大型的目錄文件自動分割成各個章節的獨立 Markdown 文件，並進行格式化處理。\n功能特色 📚 自動章節分割：將大型目錄文件按章節自動分割 🔧 智能格式化：自動處理標題格式、編號和空格 📁 結構化組織：為每個章節創建獨立的資料夾和文件 🏷️ 標準化命名：使用統一的章節編號格式（ch01, ch02\u0026amp;hellip;） 🔄 批量處理：一次性處理整個目錄結構 項目結構 app/\r├── app.py # 主程序文件\r├── toc.md # 原始目錄文件\r├── toc_modified.md # 格式化後的目錄文件\r├── chapter/ # 章節文件輸出目錄\r├── 00_issue/ # 問題記錄目錄\r│ └── issue.md\r├── ref/ # 參考文件目錄\r│ └── format-toc.py\r└── run.bat # Windows 批次執行文件 安裝與使用 系統需求 Python 3.6 或更高版本 Windows 系統（支援批次文件執行） 使用方法 方法一：使用批次文件（推薦） # 在 Windows 命令提示字元中執行 run.bat toc.md 方法二：直接執行 Python 腳本 # 在專案根目錄執行 python app.py toc.md 參數說明 toc.md：輸入的目錄文件路徑（必需參數） 處理流程 讀取輸入文件：載入指定的目錄文件 格式化處理： 將中文括號 （） 轉換為英文括號 () 處理標題層級和編號格式 統一章節編號格式為 ch01_, ch02_ 等 生成格式化文件：保存為 toc_modified.md 分割章節： 按 ### 標記分割章節 為每個章節創建獨立資料夾 生成對應的 Markdown 文件 輸出結果 執行完成後，會在 chapter/ 目錄下生成以下結構：\nchapter/\r├── ch01_Interview Process/\r│ └── ch01_Interview Process.md\r├── ch02_Programming Languages/\r│ └── ch02_Programming Languages.md\r├── ch03_Data Structures/\r│ └── ch03_Data …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\ch-toc-searchable-@@flow\\split-big-toc-into-each-chapter\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"f5b8d189ca931702e014a3f9503f2f12","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/ch-toc-searchable-@@flow/split-big-toc-into-each-chapter/","publishdate":"2025-10-05T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/split-big-toc-into-each-chapter/","section":"post","tags":["ebook"],"title":"split-big-toc-into-each-chapter","type":"post","url":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/split-big-toc-into-each-chapter/","weight":0,"wordcount":989},{"author":null,"categories":null,"content":"TOC URL Preview 工具 這是一個用於將目錄（Table of Contents）轉換為 Google 搜尋 URL 預覽文件的工具。當您有一個完整的章節目錄時，這個工具可以幫助您快速生成所有章節的 Google 搜尋結果預覽，讓您能夠快速瀏覽相關資訊。\n功能特色 📚 自動解析目錄文件（toc.txt） 🔍 為每個章節生成 Google 搜尋 URL 📁 按章節自動分類到對應資料夾 🖥️ 支援 Windows .url 文件格式 🔗 支援 Windows .lnk 捷徑文件格式 🐍 提供 Python 腳本自動化處理 💻 提供 PowerShell 腳本手動創建 專案結構 app/\r├── ch01/ # 章節資料夾（自動生成）\r│ └── 01_Flutter_簡介.url\r├── ok/ # 範例輸出資料夾\r│ ├── GoogleNumpy.lnk\r│ └── GoogleNumpy.url\r├── toc.txt # 目錄文件\r├── url-create.py # Python 自動化腳本\r├── url-create.ps1 # PowerShell URL 創建腳本\r├── lnk-create.ps1 # PowerShell 捷徑創建腳本\r└── memo.markdown # 專案說明文件 使用方法 方法一：使用 Python 腳本（推薦） 準備您的目錄文件 toc.txt，格式如下：\n01_Flutter_簡介\r1.1_Flutter_的優勢\r1.2_比較其他技術\r02_Dart_語言入門\r2.1_應用場景\r... 執行 Python 腳本：\npython url-create.py 腳本會自動：\n讀取 toc.txt 文件 為每個章節創建對應的資料夾（ch01, ch02, \u0026amp;hellip;） 生成 Google 搜尋 URL 文件（.url 格式） 方法二：使用 PowerShell 腳本 創建 URL 文件 .\\url-create.ps1 創建捷徑文件 .\\lnk-create.ps1 文件格式說明 .url 文件格式 [InternetShortcut]\rURL=https://www.google.com/search?q=搜尋關鍵字 .lnk 文件格式 Windows 捷徑文件，可以直接雙擊開啟瀏覽器並執行搜尋。\n使用 …","date":1759622400,"dir":"post\\code\\python\\00_ebook\\toc-url-preview\\","expirydate":-62135596800,"fuzzywordcount":1000,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1759622400,"objectID":"c077e557a4e2007d2533bb4c48faa6b6","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/toc-url-preview/","publishdate":"2025-10-05T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/toc-url-preview/","section":"post","tags":["ebook"],"title":"toc-url-preview","type":"post","url":"/post/code/python/00_ebook/toc-url-preview/","weight":0,"wordcount":912},{"author":null,"categories":null,"content":"代碼註解提取工具 這是一個用於從程式碼文件中提取註解並創建快捷方式的工具，支援多種程式語言，包括 Python、JavaScript、C++、Java、C# 和 Markdown。\n功能特色 🔍 多語言支援：支援 Python、JavaScript、C++、Java、C#、Markdown 等程式語言 📝 註解提取：自動識別並提取代碼中的註解 🔗 快捷方式創建：為每個註解創建可點擊的快捷方式，直接跳轉到對應的代碼行 🌐 中文轉換：自動將簡體中文轉換為繁體中文 📁 組織輸出：將提取的註解整理成大綱格式 支援的程式語言 語言 副檔名 註解格式 編輯器 Python .py # 註解 VS Code JavaScript .js // 註解 VS Code C++ .cpp // 註解, /* 註解 */ VS Code Java .java // 註解 VS Code C# .cs // 註解 VS Code Markdown .md **標題**： VS Code 安裝需求 Python 版本 (推薦) pip install opencc-python-reimplemented pip install pywin32 Node.js 版本 npm install 使用方法 Python 版本 python app/app.py \u0026amp;lt;輸入文件路徑\u0026amp;gt; 範例：\npython app/app.py example.py Node.js 版本 node app/app.js \u0026amp;lt;輸入文件路徑\u0026amp;gt; 範例：\nnode app/app.js example.js 輸出結果 1. 代碼大綱文件 工具會在輸入文件的同目錄下創建 code.outline.txt 文件，包含提取的註解大綱：\n01_初始化變數\r02_計算總和\r03_輸出結果 2. 快捷方式文件 在輸入文件的同目錄下創建 00_codeCommentExtract 資料夾，包含：\n01_初始化變數.lnk - 點擊可跳轉到第1行 02_計算總和.lnk - 點擊可跳轉到第2行 03_輸出結果.lnk - 點擊可跳轉到第3行 使用範例 假設有以下 Python 代碼 (example.py)：\ndef calculate_sum(a, b): total = a + b # 計算兩個數字的總和 return …","date":1759190400,"dir":"post\\code\\python\\00_code\\class-function-extractor\\","expirydate":-62135596800,"fuzzywordcount":1200,"html":null,"keywords":["code"],"kind":"page","lang":"en","lastmod":1759190400,"objectID":"be1cad2915a7b306b18fb6333c215df7","permalink":"https://wikihuangblog.github.io/post/code/python/00_code/class-function-extractor/","publishdate":"2025-09-30T00:00:00Z","readingtime":3,"relpermalink":"/post/code/python/00_code/class-function-extractor/","section":"post","tags":["code"],"title":"class-function-extractor","type":"post","url":"/post/code/python/00_code/class-function-extractor/","weight":0,"wordcount":1164},{"author":null,"categories":null,"content":"PDF 標題和圖片提取工具 這個工具可以從 PDF 文件中提取每頁的標題和圖片內容，並將每個圖片保存為以對應頁面標題命名的 JPG 文件。\n安裝依賴項 在運行腳本之前，請先安裝所需的 Python 包：\npip install -r requirements.txt 使用方法 確保 school.pdf 文件在與 app.py 相同的目錄中 運行腳本： python app.py 功能說明 標題提取: 自動從每頁中提取標題（使用第一行非空文本） 圖片提取: 提取每頁中的所有圖片內容 頁面截圖: 如果頁面沒有圖片但有文本內容，會創建頁面截圖 智能命名: 根據頁面標題自動生成文件名 格式轉換: 自動將所有圖片轉換為高質量的 JPG 格式 輸出 所有提取的圖片將保存在 extracted_images 目錄中，文件名格式為：\n{標題}_page{頁碼}.jpg - 單個圖片 {標題}_page{頁碼}_img{圖片編號}.jpg - 多個圖片 {標題}_page{頁碼}_screenshot.jpg - 頁面截圖 測試結果 成功從 school.pdf 中提取了 202 張圖片，包括：\n各類系統操作截圖 表單樣張 操作流程圖 系統介面截圖 注意事項 文件名會自動清理，移除不合法的字符 如果無法提取標題，會使用頁面編號作為文件名 支持 CMYK 和 RGB 格式的圖片轉換 使用 PyMuPDF 庫進行高效的 PDF 處理 ","date":1758931200,"dir":"post\\code\\python\\00_UI-user-feedback\\wishcase\\school-wish-pdf-extract-jpg-name-by-title\\","expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":["UI-user-feedback"],"kind":"page","lang":"en","lastmod":1758931200,"objectID":"4907d48ce1cb65593d0c8ca976d6b727","permalink":"https://wikihuangblog.github.io/post/code/python/00_ui-user-feedback/wishcase/school-wish-pdf-extract-jpg-name-by-title/","publishdate":"2025-09-27T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_ui-user-feedback/wishcase/school-wish-pdf-extract-jpg-name-by-title/","section":"post","tags":["UI-user-feedback"],"title":"school-wish-pdf-extract-jpg-name-by-title","type":"post","url":"/post/code/python/00_ui-user-feedback/wishcase/school-wish-pdf-extract-jpg-name-by-title/","weight":0,"wordcount":444},{"author":null,"categories":null,"content":"以下是這個專案的說明文件，我會使用 YAML front matter 來包含關鍵字資訊：\n--- title: 多欄文字轉圖片工具 description: 將文字檔案轉換為多欄排版的圖片格式 keywords: - Python - PIL - 圖片生成 - 文字排版 - 多欄布局 dependencies: - Pillow (PIL) - Python 3.x author: Anonymous created: 2024 --- # 多欄文字轉圖片工具說明文件 ## 功能概述 這個工具可以將純文字檔案轉換成多欄排版的圖片，支援自定義欄數、字體大小和圖片高度，適合用於製作文字展示海報或資料視覺化。 ## 主要功能 - 支援多欄文字排版 - 自動處理中文字體 - 跨平台字體支援（Windows/MacOS/Linux） - 可自定義圖片尺寸和字體大小 ## 技術細節 ### 字體處理 程式會自動檢測並使用以下字體路徑： - MacOS: `/System/Library/Fonts/PingFang.ttc` - Linux: `/usr/share/fonts/truetype/droid/DroidSansFallbackFull.ttf` - Windows: `C:\\Windows\\Fonts\\msyh.ttc` ### 參數說明 - `text`: 輸入的文字內容 - `num_columns`: 欄數（預設值視需求而定） - `image_height`: 圖片高度（預設 924 像素） - `font_size`: 字體大小（預設 14 像素） - `column_width`: 每欄寬度（固定 300 像素） ### 輸出 - 輸出檔案名稱：`!!output.jpg` - 格式：JPEG - 背景：白色 - 文字顏色：黑色 ## 使用範例 ```python create_multicolumn_image(text, num_columns=10, image_height=800, font_size=15) 注意事項 確保輸入文字檔案使用 UTF-8 編碼 系統需要安裝對應的中文字體 文字量需要與欄數相匹配，避免排版溢出 可能的優化方向 自動調整欄寬以適應最長的文字行 添加文字對齊選項 支援更多輸出格式 添加文字顏色自定義功能 實現自動 …","date":1748304000,"dir":"post\\code\\python\\00_ebook\\ch-toc-searchable-@@flow\\txt-to-multi-column-pic\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["ebook"],"kind":"page","lang":"en","lastmod":1748304000,"objectID":"14c831494276e88fb74ac2ddd48a4764","permalink":"https://wikihuangblog.github.io/post/code/python/00_ebook/ch-toc-searchable-@@flow/txt-to-multi-column-pic/","publishdate":"2025-05-27T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/txt-to-multi-column-pic/","section":"post","tags":["ebook"],"title":"txt-to-multi-column-pic","type":"post","url":"/post/code/python/00_ebook/ch-toc-searchable-@@flow/txt-to-multi-column-pic/","weight":0,"wordcount":537},{"author":null,"categories":null,"content":"﻿\u0026amp;mdash; title: HTML to PNG Converter description: 一個使用 Selenium 將 HTML 文件批量轉換為 PNG 圖片的工具 author: Your Name created: 2024-03-21 language: Python dependencies:\nselenium webdriver_manager HTML to PNG 轉換工具 這是一個簡單但功能強大的工具，可以將 HTML 文件批量轉換為 PNG 圖片格式。\n功能特點 支持批量轉換整個資料夾中的 HTML 文件 自動調整截圖尺寸以適應頁面內容 支持完整的頁面渲染，包括動態加載的內容 無頭模式運行，不需要圖形界面 安裝需求 pip install selenium webdriver-manager 使用方法 確保已安裝所有依賴包 運行腳本並提供包含 HTML 文件的資料夾路徑： python app.py /path/to/your/html/files 工作原理 此工具使用 Selenium WebDriver：\n以無頭模式啟動 Chrome 瀏覽器 載入 HTML 文件 等待頁面完全渲染 自動調整視窗大小以適應內容 捕獲整個頁面的截圖 將截圖保存為 PNG 格式 注意事項 確保系統已安裝 Chrome 瀏覽器 轉換過程中請確保網絡連接穩定 對於較大的 HTML 文件，可能需要更長的處理時間 錯誤處理 如果遇到以下錯誤：\n\u0026amp;ldquo;錯誤：未提供文件夾路徑\u0026amp;rdquo; - 請確保在運行腳本時提供了正確的資料夾路徑 Chrome 驅動程序相關錯誤 - 請確保已正確安裝 Chrome 瀏覽器 授權 [在此添加您的授權信息]\n貢獻 歡迎提交 Pull Requests 或創建 Issues 來幫助改進這個工具。\n這個 README.md 文件包含了：\r- YAML 前置資料，提供了項目的基本信息\r- 項目描述和主要功能\r- 安裝和使用說明\r- 工作原理說明\r- 錯誤處理指南\r- 授權和貢獻信息\r您可以根據實際需求修改其中的內容，特別是：\r- 更新作者信息\r- 添加具體的授權條款\r- 補充更多的使用場景和示例\r- 添加項目的具體限制和注意事項 ","date":1734998400,"dir":"post\\code\\python\\00_exam---\\00_stastic\\html-to-png\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["exam---","stastic"],"kind":"page","lang":"en","lastmod":1734998400,"objectID":"8dae496a1d3bfd4f73bfc1e57b18af9e","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/00_stastic/html-to-png/","publishdate":"2024-12-24T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/00_stastic/html-to-png/","section":"post","tags":["exam---","stastic"],"title":"html-to-png","type":"post","url":"/post/code/python/00_exam---/00_stastic/html-to-png/","weight":0,"wordcount":568},{"author":null,"categories":null,"content":"Cursor README Flow 概述 這是一個自動化工具，旨在簡化項目文檔創建和 Cursor 編輯器工作流程。通過按 F1 鍵，工具會自動創建 README.md 文件並在 Cursor 編輯器中打開項目，同時自動生成項目代碼解釋文檔。\n功能特色 一鍵操作: 按 F1 鍵即可完成整個流程 自動文檔創建: 自動生成帶有 YAML front matter 的 README.md 文件 Cursor 集成: 自動在 Cursor 編輯器中打開項目 智能提示: 自動向 Cursor AI 發送代碼解釋請求 路徑複製: 自動複製當前目錄路徑到剪貼簿 文件結構 app/\r├── app.ahk # AutoHotkey 主腳本\r├── create_readme.py # Python 腳本，用於創建 README.md\r├── go.bat # 批處理文件，用於創建空 README.md\r└── README.md # 項目文檔 使用方法 前置條件 安裝 AutoHotkey 安裝 Python 3.x 安裝 Cursor 編輯器 設置步驟 將項目文件放在合適的位置 修改 app.ahk 中的路徑： 更新 Python 腳本路徑（第 22 行） 更新 Cursor.exe 路徑（第 31 行） 操作流程 複製目錄路徑: 在文件資源管理器中複製要打開的項目目錄路徑 按 F1 鍵: 觸發自動化流程 自動執行: 工具會自動： 檢查並創建 README.md 文件（如果不存在） 在 Cursor 編輯器中打開項目 自動向 Cursor AI 發送代碼解釋請求 技術細節 AutoHotkey 腳本 (app.ahk) F1 熱鍵綁定: 觸發整個自動化流程 剪貼簿操作: 獲取目錄路徑 文件檢查: 檢查 README.md 是否存在 Python 調用: 執行 Python 腳本創建文檔 Cursor 啟動: 自動打開 Cursor 編輯器 AI 交互: 自動發送代碼解釋請求 Python 腳本 (create_readme.py) YAML Front Matter: 創建包含標題、日期、描述的元數據 模板生成: 生成標準的 README.md 模板 UTF-8 編碼: 確保中文字符正確顯示 批處理文件 (go.bat) 空文件創建: 創建空的 README.md …","date":1734566400,"dir":"post\\code\\python\\00_AIQA\\ch02_cursor\\cursor-readme-flow\\","expirydate":-62135596800,"fuzzywordcount":900,"html":"自動化工具，用於快速創建項目文檔並在 Cursor 編輯器中打開項目","keywords":["cursor","readme","automation","ahk","python","documentation"],"kind":"page","lang":"en","lastmod":1734566400,"objectID":"a37385928f4c8bb24909391bae670c57","permalink":"https://wikihuangblog.github.io/post/code/python/00_aiqa/ch02_cursor/cursor-readme-flow/","publishdate":"2024-12-19T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_aiqa/ch02_cursor/cursor-readme-flow/","section":"post","tags":null,"title":"Cursor README Flow","type":"post","url":"/post/code/python/00_aiqa/ch02_cursor/cursor-readme-flow/","weight":0,"wordcount":840},{"author":null,"categories":null,"content":"﻿我會為這個專案建立一個包含 YAML front matter 的 README.md 文件。以下是建議的內容：\n--- title: AIQA File Analyzer description: 一個用於分析和生成 AIQA 文件報告的 Python 工具 author: Your Name created: 2024-03-21 language: Python dependencies: - pandas - os - re - sys --- # AIQA File Analyzer ## 專案說明 這是一個用於分析 AIQA 文件並生成 HTML 報告的 Python 工具。該工具可以遍歷指定目錄，解析 .aiqa.html 文件的命名規則，並生成一個包含關鍵信息的 HTML 表格報告。 ## 功能特點 - 遍歷目錄結構並提取 .aiqa.html 文件信息 - 解析文件名中的前綴編號和標記 - 生成帶有條件格式的 HTML 表格報告 - 支持多種標記顏色顯示（紅色、淺藍色等） ## 使用方法 ```bash python app.py \u0026amp;lt;root_folder_path\u0026amp;gt; 參數說明 root_folder_path: 要分析的根目錄路徑 輸出格式 程序會在指定的根目錄下生成 output_table.html 文件，包含以下列：\nkeyword-group：關鍵字組 prefixQ_number：問題前綴編號 marker：標記符號 Question-name：問題名稱 標記顏色說明 [R] - 紅色背景 [B] - 淺藍色背景 文件命名規則 文件名應遵循以下格式：\n目錄名：應包含可提取的前綴數字（例如：123_dirname） 文件名：支持帶標記的格式（例如：[R][B]123_filename.aiqa.html） 錯誤處理 程序會捕獲並記錄文件名解析過程中的錯誤 錯誤信息會在控制台輸出 依賴項目 Python 3.x pandas 標準庫：os, re, sys 授權 [請添加您的授權信息]\n這個 README.md 包含了：\r1. YAML front matter，提供了基本的項目元數據\r2. 詳細的項目說明和功能介紹\r3. 使用方法和參數說明\r4. 輸出格式說明\r5. 標記規則說明\r6. 文件命名規則\r7. 錯誤處理說明\r8. …","date":1731715200,"dir":"post\\code\\python\\00_exam---\\exam-outline-to-table\\","expirydate":-62135596800,"fuzzywordcount":700,"html":null,"keywords":["exam---"],"kind":"page","lang":"en","lastmod":1731715200,"objectID":"b68adf098b17161ff76d126cea608225","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/exam-outline-to-table/","publishdate":"2024-11-16T00:00:00Z","readingtime":2,"relpermalink":"/post/code/python/00_exam---/exam-outline-to-table/","section":"post","tags":["exam---"],"title":"exam-outline-to-table","type":"post","url":"/post/code/python/00_exam---/exam-outline-to-table/","weight":0,"wordcount":638},{"author":null,"categories":null,"content":"﻿我會為您創建一個包含 YAML front matter 的 README.md 文件。以下是建議的內容：\n--- title: Split-Statistic description: 一個用於分割 HTML 文件的 Python 工具 author: Your Name created: 2024-03-21 language: Python dependencies: - beautifulsoup4 --- # Split-Statistic 一個簡單但實用的 Python 工具，用於將包含多個文章的 HTML 文件分割成獨立的 HTML 文件。 ## 功能特點 - 自動識別並處理 HTML 中的圖片和連結 - 為未包裝的圖片添加必要的 separator 標籤 - 自動創建表格結構（如需要） - 支持 UTF-8 編碼 - 按順序生成獨立的 HTML 文件 ## 安裝需求 ```bash pip install beautifulsoup4 使用方法 將您要處理的 HTML 文件放在程式同一目錄下 修改 input_file 變量為您的輸入文件名稱 運行程式： python app.py 輸出結果 程式會在當前目錄下生成多個 HTML 文件，格式為 art_1.html、art_2.html 等。\n自定義分割標記 您可以通過修改 separator_tag 變量來自定義分割標記：\nseparator_tag = \u0026amp;#39;\u0026amp;lt;div class=\u0026amp;#34;separator\u0026amp;#34;\u0026amp;#39; # 預設值 # 或 separator_tag = \u0026amp;#39;\u0026amp;lt;table bgcolor\u0026amp;#39; # 替代選項 注意事項 確保輸入文件使用 UTF-8 編碼 程式會自動處理未正確包裝的圖片元素 輸出文件將保持原始 HTML 結構 授權 [選擇您的授權方式]\n貢獻 歡迎提交 Issue 和 Pull Request！\n這個 README.md 包含了：\r1. YAML front matter 包含基本項目信息\r2. 項目描述和主要功能\r3. 安裝和使用說明\r4. 自定義選項說明\r5. 注意事項\r6. 授權和貢獻指南\r您可以根據實際需求修改內容，特別是：\r- 更新作者信息\r- 選擇合適的授權方式\r- 添加更多具體的使用案例\r- 補充其他相關文檔連結 ","date":1731715200,"dir":"post\\code\\python\\00_exam---\\00_stastic\\split-statistic\\","expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":["exam---","stastic"],"kind":"page","lang":"en","lastmod":1731715200,"objectID":"135255a38614d28db0bd050792162f9b","permalink":"https://wikihuangblog.github.io/post/code/python/00_exam---/00_stastic/split-statistic/","publishdate":"2024-11-16T00:00:00Z","readingtime":1,"relpermalink":"/post/code/python/00_exam---/00_stastic/split-statistic/","section":"post","tags":["exam---","stastic"],"title":"split-statistic","type":"post","url":"/post/code/python/00_exam---/00_stastic/split-statistic/","weight":0,"wordcount":495},{"author":null,"categories":null,"content":"e管家及時通 然後這個就是當時做到吐血的專案了。怎麼說哩，一言難盡啊。這個專案讓我意識到說自己很爛哦。就是有史以來感覺到說，哎，什麼事版本控制哦。什麼叫專案管理了？什麼叫組員協調那當時的我？呃，第一次遇到這種事情是在，是。不知道怎麼辦啊？然後就是。就只能夠努力而做好自己自己能夠做的事情啊。因為在那邊抱怨一大堆的，還不如把自己能夠做的事情做完再說吧。那這個專案呢，目的是要讓那個使用者可以。就是一般的民眾啊，一般的民眾可以透過這個。算是桌面應用程序吧？然後去存取政府相關的訊息喔。然後做一些收藏啊，然後過濾了相關動作。那整個過程是蠻辛苦的啦，然後。過程中是學到很多東西啊，就是。錯誤訊息的記錄啊，然後。要怎麼做單元測試啊等等的。這過程當中被強迫性的養成了就是。對於程序的規範就很龜毛的程度了，因為只要一個命名不確實呢，後來就要搜尋就很不容易了。\n當時我覺得最辛苦的事情是。看文件吧。要從幾萬頁的內容當中，搜尋到自己要的那一行，真的是很已經很困難的事情了。那找到資料之后，就一定要能夠。必需要好好的妥善保存，才能夠。再度找到。自己曾經搜尋過的資料。那也因為這個習慣，才不會讓你就是在大量的資料當中迷失了。那現在AI呢？在提問方面就方便很多了，但不管提問要如何方便,保存就有資料一樣是很重要的事情。不管別人提供的答案有多好，你要如何再度把那份資料調出來，就看你自己的管理功力了。\n","date":1293840000,"dir":"post\\diary\\2011\\00_mainTarget{eool,essay}\\etool\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["eool","essay"],"kind":"page","lang":"en","lastmod":1293840000,"objectID":"f4e15c788f2beaae1a26cf45acd9f8ae","permalink":"https://wikihuangblog.github.io/post/diary/2011/00_maintargeteoolessay/etool/","publishdate":"2011-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/diary/2011/00_maintargeteoolessay/etool/","section":"post","tags":["eool","essay"],"title":"etool","type":"post","url":"/post/diary/2011/00_maintargeteoolessay/etool/","weight":0,"wordcount":585},{"author":null,"categories":null,"content":"email-organize 過去在做這個專案的時候啊，當時其實最可怕的問題就是要面對這些數不完的email。就每天都要進行。這個專案的編輯嘛，每天都要修改啊哪，每一天都會有業主的意見了。所以email可以說是被塞爆的狀態啊。那到底要怎麼整理比較好呢？我覺得email這麼多要。將他依照不同的類別加以分類啊。那就是我當初設定的第一個版本嘛，當時是把每一個email的鏈結通通。就用Excel的方式呢來產生出一各可以排序啊，可以搜尋啊，那依照日期排序然後關鍵字。去過濾的一個架構，這樣比較好搜尋了。那這是完我完成了第一個版本了。那後來就不用這種方法了。後來是。比較偏向檔案搜尋的方式就是將每一個email的鏈結都。透過Outlook的一個MSG檔案，然後。透過ABC去搜尋。那在分類方面呢，這是用資料夾，然後依照關鍵字去分類啊。那日期的部分呢一樣就是。依照。 Email送過來的日期呢來作為分類了。那在那之後呢，就比較不會去害怕這種大量的email管理問題。\n","date":1293840000,"dir":"post\\diary\\2011\\00_mainTarget{eool,essay}\\etool-email\\","expirydate":-62135596800,"fuzzywordcount":500,"html":null,"keywords":["eool","essay"],"kind":"page","lang":"en","lastmod":1293840000,"objectID":"8f3b8c42be070fa3ff55cc3bed9771b8","permalink":"https://wikihuangblog.github.io/post/diary/2011/00_maintargeteoolessay/etool-email/","publishdate":"2011-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/diary/2011/00_maintargeteoolessay/etool-email/","section":"post","tags":["eool","essay"],"title":"etool-email","type":"post","url":"/post/diary/2011/00_maintargeteoolessay/etool-email/","weight":0,"wordcount":413},{"author":null,"categories":null,"content":"四技二專志願表系統 這是2010年的。那個剛進入研究所第一年的紀錄。那當時第一個專案就是要做一個志願表嘛。就當時有那個四技二專的招商系統，然後要做一個前端的報名界面。那當時就是老師給我一個。有用到資料庫的鳥類觀察記錄哦。然後用相同的程序結構，然後去研究一下資料庫啊怎麼用啊？結構欸。欄位啊等等的一樣畫葫蘆吧。那也是有史以來第一次去認識一下什麼叫大專案呢？每個程序的模組，而要依序放在什麼樣的位置？然後有。架構的去組成一個專案啊。呃，並且也要去研究一些邏輯啊。研究說不同的身份。一般的學生或者是特殊的學生，或者是他有多重身份等等的，要怎麼樣去報名不一樣的。學校啊，等等的。然後當時還沒有這麼好的版本控制工具啊，所以每個小部分就是一個小檔案了。那這個方法。放到現代來說的話，如果你有好的檔案，比對工具的話一樣有不錯的效果。那我在之後呢就有完成了一些它的順序圖畫流程圖等等的。就是要把當初的專案了。就裡面的架構，然後。在現代的話可以透過AI的技術呢，架構變得更加明確了。\n那由於過去是用flex做的嘛，那現在已經不支援這個技術，那好在過去的程序都還有保留的好。可透過AI來。擷取他們的相關架構。根據這個架構呢，就可以在用比較現代的語言呢來進行製作。產生出架構更加乾淨的專案了。\n","date":1262304000,"dir":"post\\diary\\2010\\00_mainTarget{bird,wish}\\wishCase\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":["bird","wish"],"kind":"page","lang":"en","lastmod":1262304000,"objectID":"9ff02a99183924f48c962922f54dacd7","permalink":"https://wikihuangblog.github.io/post/diary/2010/00_maintargetbirdwish/wishcase/","publishdate":"2010-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/diary/2010/00_maintargetbirdwish/wishcase/","section":"post","tags":["bird","wish"],"title":"wishCase","type":"post","url":"/post/diary/2010/00_maintargetbirdwish/wishcase/","weight":0,"wordcount":533},{"author":null,"categories":null,"content":"game-project-report 他只是大學四年級做的遊戲專案。這個專案其實。就是把。書本學習的內容貫徹到底吧。當時看了什麼，看了射擊遊戲啊。然後看到那個迷宮的編輯器哦。生了2.5D的地圖啊。自行加入地圖編輯器等等的。當時深刻的體會到看過一本書，跟真正的貫徹一本書內容是完全不一樣的事情。就當時就很敬佩能夠寫書的作者，所以之後就也想要試著去寫說明文件。那也就算是。在那之後會就是決心學習輸入法，決心打字打快一點，可以打到盲打的程度。就遇到的事情之後才意識到能力不足吧，然後在去改善這樣子。\n國立台中技術學院\n多媒體設計系\n98****級專題設計與製作報告\nWii****互動與網路行銷\n互動組\n​ 學生/學號： 周子喻 14944020\n​ 黃蔚麒 14944038\n​ 指導教授： 蔡子瑋 教授\n中華民國 98 年 3 月\n童幻冒險島\n學生：周子喻 指導教授：蔡子瑋 教授\n黃蔚麒\n國立臺中技術學院多媒體設計系\n摘 要\n在傳統的RPG遊戲中，加入Wii的互動方式，讓玩家不只能體驗虛擬遊戲的世界更能享受揮動肢體的快感\n透過網路和世界各地的玩家來進行互動\n一起在虛擬的世界中冒險!!\nThe island of fairy story adventure\nStudent：tzu-yu chou\nWei-chi huang Adviser：zi-wei cai\nDepartment of Multimedia Design\nNational Taichung Institute of Technology\nABSTRACT In the traditional RPG game, add the interactive way of Wii.\nLet’s players not only can experience the world of virtual game, but also enjoy the feeling of waving body.\nBy internet, interacting with players all over the world, take a risk in the virtual world!!\n目錄\n中文摘要\u0026amp;hellip; i\n英文摘要\u0026amp;hellip; ii\n目錄\u0026amp;hellip; 1\n第一章 緒論\u0026amp;hellip; 2\n第一節 主題概 …","date":1230768000,"dir":"post\\diary\\2009\\00_mainTarget{university}\\03_game\\game-project-report\\","expirydate":-62135596800,"fuzzywordcount":2700,"html":null,"keywords":["university"],"kind":"page","lang":"en","lastmod":1230768000,"objectID":"0d2be92a2c3a7a0cbedccd5d6776cc37","permalink":"https://wikihuangblog.github.io/post/diary/2009/00_maintargetuniversity/03_game/game-project-report/","publishdate":"2009-01-01T00:00:00Z","readingtime":6,"relpermalink":"/post/diary/2009/00_maintargetuniversity/03_game/game-project-report/","section":"post","tags":["university"],"title":"game-project-report","type":"post","url":"/post/diary/2009/00_maintargetuniversity/03_game/game-project-report/","weight":0,"wordcount":2616},{"author":null,"categories":null,"content":"game tuts 是完成了遊戲專案之後啊，就很想要把每一個小部份都寫成一個。說明文件本。啊，到時會這麼想的原因是因為其實我覺得一個大專案當中其實有很多小部分。然後我如果不把他解釋過一遍的話，我就連我自己都會忘記。所以就試著去描述自己的了解。你看那個小小的簡單的遊戲要把它分割為這麼多部分。益航都做解釋了。當時就沒好像都要做解釋了。當時就買義航都要做解釋啊。當時就每一段程序代碼都要做解釋了。而現在的話，倒是只要你把程序整理好，AI就可以幫你說明了。不過也多虧了那一段經驗啊，才有辦法就是。提升自己的表達能力哦。因為黑暗雖然很萬能，但是。你也要有能力去表達你想要表達的東西一定要聽得懂，他才能夠做出。你想要做出來的東西，你要表達的出來才可以。\n基礎產生敵人\n現在，這一刻將會教你如何自動的產生敵人\nMain.fla\n看”script”圖層\n2\n我們從script class得到一個影片片段，那麼我們是如何得到它的呢?\nScript.as\n45\nFunction importSteps\n載這函式中，主要的工作便是產生一個包含全部敵人資料的陣列，我使用”stepArr”來代表他。\nstepArr[0]=(30(出現的時間), \u0026amp;ldquo;compMtr_q\u0026amp;rdquo;(怪物的名稱),\n(stageWH.w)+20(敵人出現的X座標),100(敵人出現的Y座標))\n很好，在這個範例中我只產生了3個敵人，現在看看如何使用stepArr來產生敵人。\n62\nFunction main(e:TimerEvent)\n這函式是使用timerEvent，\n所以他會被不斷的執行\n65\n當stepArr陣列不是空值時，他會執行函式checkStep();\n71\nFunction checkStep()\n在這函式，我們會取得stepArr的資料，從第一筆到最後一筆\n77\nStep[0]代表敵人被安排出現的時間\nThis.nowStep 是遊戲中的計數器\n執行過程如下圖\n圖1:時間尚未開始計時。\n圖2:時間到怪物0的出場時間。\n圖3:時間到怪物1的出場時間。\n陣列stepArr的怪物資料將會被傳送到此函式\nenemy_obj.createNew(怪物的名稱)\n81\n就像圖片所示，你將會發現在傳送完一筆資料後，我將會使用splice來刪除掉已經被發送的資料，因為它已經在也不會被使用了。 …","date":1230768000,"dir":"post\\diary\\2009\\00_mainTarget{university}\\03_game\\game-tuts\\","expirydate":-62135596800,"fuzzywordcount":1100,"html":null,"keywords":["university"],"kind":"page","lang":"en","lastmod":1230768000,"objectID":"e4a634d14b607cf09abb953863a3ceb4","permalink":"https://wikihuangblog.github.io/post/diary/2009/00_maintargetuniversity/03_game/game-tuts/","publishdate":"2009-01-01T00:00:00Z","readingtime":3,"relpermalink":"/post/diary/2009/00_maintargetuniversity/03_game/game-tuts/","section":"post","tags":["university"],"title":"game-tuts","type":"post","url":"/post/diary/2009/00_maintargetuniversity/03_game/game-tuts/","weight":0,"wordcount":1083},{"author":null,"categories":null,"content":"About Me Huabing Zhao is a software architect, an Istio Member and an ONAP PTL. He has a solid experience in the information and telecommunication technology industry for more than 17 years.\nThroughout his career, he has built a number of large-scale, cross-country software systems, most of them are still running in production.\nHe loves open source and has been contributing to various open source projects, he is a member of Istio, previous PTL of ONAP, the author of the Hugo clean-white theme and the open source project Aeraki Mesh.\nHe also has strong interests in various technical topics such as Cloud Native, Artificial Intelligence, Cryptocurrencies, Smart Home, etc. He love sharing his ideas about these things in his blog.\nHuabing holds a BSc in Computer Science and Technology from Chongqing University in China.\nCurrently, Huabing works as a senior engineer at Tencent Cloud and also wears the hat of PTL in ONAP open source project. For now, his main focus is to build a managed …","date":-62135596800,"dir":"about\\","expirydate":-62135596800,"fuzzywordcount":600,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://wikihuangblog.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":500},{"author":null,"categories":null,"content":"Go 语言学习笔记 Envoy 学习笔记 ","date":-62135596800,"dir":"notes\\","expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"1ede8046f9c3a02d422dea7bbf324e64","permalink":"https://wikihuangblog.github.io/notes/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/notes/","section":"","tags":null,"title":"","type":"page","url":"/notes/","weight":0,"wordcount":12},{"author":null,"categories":null,"content":"","date":-62135596800,"dir":"archive\\","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://wikihuangblog.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]